{
    "data": {
        "submissionDetails": {
            "runtime": 7,
            "runtimeDisplay": "7 ms",
            "runtimePercentile": 35.555599999999984,
            "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"0\", 18.3333], [\"2\", 1.6667], [\"3\", 39.4444], [\"4\", 4.4444], [\"5\", 0.5556], [\"7\", 20.5556], [\"8\", 7.7778], [\"9\", 1.1111], [\"10\", 1.1111]]}",
            "memory": 10928000,
            "memoryDisplay": "10.9 MB",
            "memoryPercentile": 53.88889999999999,
            "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"10600\", 0.5556], [\"10700\", 3.8889], [\"10800\", 9.4444], [\"10900\", 32.2222], [\"11000\", 18.3333], [\"11100\", 13.8889], [\"11200\", 9.4444], [\"11300\", 2.2222], [\"11500\", 1.1111], [\"11600\", 1.1111], [\"11700\", 1.6667], [\"14600\", 0.5556]]}",
            "code": "#include <stdlib.h>\n\n// Forward declaration\nstruct Node* cloneGraphHelper(struct Node* node, struct Node* visited[]);\n\nstruct Node* cloneGraph(struct Node* s) {\n    if (s == NULL) return NULL;\n\n    // Array to store cloned nodes by val (1-based indexing)\n    struct Node* visited[101] = {NULL};\n\n    return cloneGraphHelper(s, visited);\n}\n\nstruct Node* cloneGraphHelper(struct Node* node, struct Node* visited[]) {\n    if (node == NULL) return NULL;\n\n    // If already cloned, return the clone\n    if (visited[node->val] != NULL) {\n        return visited[node->val];\n    }\n\n    // Create clone for current node\n    struct Node* clone = (struct Node*)malloc(sizeof(struct Node));\n    clone->val = node->val;\n    clone->numNeighbors = node->numNeighbors;\n    if (clone->numNeighbors > 0) {\n        clone->neighbors = (struct Node**)malloc(sizeof(struct Node*) * clone->numNeighbors);\n    } else {\n        clone->neighbors = NULL;\n    }\n\n    // Mark this node as cloned\n    visited[node->val] = clone;\n\n    // Clone all neighbors recursively\n    for (int i = 0; i < node->numNeighbors; i++) {\n        clone->neighbors[i] = cloneGraphHelper(node->neighbors[i], visited);\n    }\n\n    return clone;\n}\n",
            "timestamp": 1749306644,
            "statusCode": 10,
            "user": {
                "username": "IvanAssis",
                "profile": {
                    "realName": "IvanAssis",
                    "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
                }
            },
            "lang": {
                "name": "c",
                "verboseName": "C"
            },
            "question": {
                "questionId": "133",
                "titleSlug": "clone-graph",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 22,
            "totalTestcases": 22,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}