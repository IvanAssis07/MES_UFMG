{
    "data": {
        "submissionDetails": {
            "runtime": 10945,
            "runtimeDisplay": "N/A",
            "runtimePercentile": null,
            "runtimeDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"0\", 17.2742], [\"1\", 3.894], [\"2\", 4.3496], [\"3\", 14.0017], [\"4\", 12.1375], [\"5\", 5.1781], [\"6\", 4.7639], [\"7\", 9.1964], [\"8\", 6.628], [\"9\", 2.5269], [\"10\", 2.237], [\"11\", 3.894], [\"12\", 1.5742], [\"13\", 1.3256], [\"14\", 1.0356], [\"15\", 1.4913], [\"16\", 0.4971], [\"17\", 0.29], [\"18\", 0.58], [\"19\", 0.8699], [\"20\", 0.6214], [\"21\", 0.2071], [\"22\", 0.3314]]}",
            "memory": 17532000,
            "memoryDisplay": "N/A",
            "memoryPercentile": null,
            "memoryDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"17400\", 0.1657], [\"17500\", 1.1599], [\"17600\", 8.6993], [\"17700\", 26.512], [\"17800\", 23.3637], [\"17900\", 19.2212]]}",
            "code": "class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -> int:\n        # Method 1: Remove rightmost set bit from right until left == right\n        while left != right:\n            right = right & (right - 1)  # Remove rightmost set bit\n        return left\n    \n    def rangeBitwiseAndShift(self, left: int, right: int) -> int:\n        # Method 2: Find common prefix using bit shifting\n        shift = 0\n        while left != right:\n            left >>= 1\n            right >>= 1\n            shift += 1\n        return left << shift\n    \n    def rangeBitwiseAndXOR(self, left: int, right: int) -> int:\n        # Method 3: Find the most significant differing bit\n        diff = left ^ right\n        # Find the most significant bit in diff\n        msb = 0\n        while diff:\n            diff >>= 1\n            msb += 1\n        # Create mask to keep only the common prefix\n        mask = ~((1 << msb) - 1) if msb > 0 else -1\n        return left & mask",
            "timestamp": 1749307511,
            "statusCode": 14,
            "user": {
                "username": "IvanAssis",
                "profile": {
                    "realName": "IvanAssis",
                    "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
                }
            },
            "lang": {
                "name": "python3",
                "verboseName": "Python3"
            },
            "question": {
                "questionId": "201",
                "titleSlug": "bitwise-and-of-numbers-range",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "5\n7",
            "codeOutput": "",
            "expectedOutput": "4",
            "totalCorrect": 0,
            "totalTestcases": 8271,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}