{
    "data": {
        "submissionDetails": {
            "runtime": 0,
            "runtimeDisplay": "0 ms",
            "runtimePercentile": 100.0,
            "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"0\", 95.6788], [\"1\", 0.521], [\"2\", 1.5936], [\"3\", 0.7049], [\"4\", 0.1226]]}",
            "memory": 7816000,
            "memoryDisplay": "7.8 MB",
            "memoryPercentile": 98.83539999999999,
            "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"7800\", 1.1646], [\"7900\", 29.1143], [\"8000\", 40.1165], [\"8100\", 19.5219], [\"8200\", 9.0714]]}",
            "code": "#include <string.h>\n\nint strStr(char* haystack, char* needle) {\n    int h_len = strlen(haystack);\n    int n_len = strlen(needle);\n\n    // If needle is empty, return 0 (as per common convention)\n    if (n_len == 0) return 0;\n\n    // Iterate through haystack up to the point where the remaining\n    // characters are at least as many as in needle\n    for (int i = 0; i <= h_len - n_len; i++) {\n        int j = 0;\n        while (j < n_len && haystack[i + j] == needle[j]) {\n            j++;\n        }\n        if (j == n_len) {\n            return i; // Match found at index i\n        }\n    }\n\n    return -1; // No match found\n}\n",
            "timestamp": 1749156768,
            "statusCode": 10,
            "user": {
                "username": "IvanAssis",
                "profile": {
                    "realName": "IvanAssis",
                    "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
                }
            },
            "lang": {
                "name": "c",
                "verboseName": "C"
            },
            "question": {
                "questionId": "28",
                "titleSlug": "find-the-index-of-the-first-occurrence-in-a-string",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 83,
            "totalTestcases": 83,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}