{
  "data": {
    "submissionDetails": {
      "runtime": 0,
      "runtimeDisplay": "0 ms",
      "runtimePercentile": 100.0,
      "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"0\", 16.9791], [\"1\", 3.7486], [\"2\", 6.946], [\"3\", 35.0606], [\"4\", 22.9327], [\"5\", 3.7486], [\"6\", 5.4024]]}",
      "memory": 15784000,
      "memoryDisplay": "15.8 MB",
      "memoryPercentile": 95.4795,
      "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"10700\", 0.2205], [\"10800\", 0.441], [\"10900\", 0.882], [\"11000\", 0.7718], [\"11200\", 0.5513], [\"11300\", 0.1103], [\"11400\", 0.1103], [\"15700\", 1.4333], [\"15800\", 21.72], [\"15900\", 39.2503], [\"16000\", 20.8379], [\"16100\", 7.828]]}",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n#include <stdlib.h>\n\nstruct TreeNode* helper(int* nums, int left, int right) {\n    // Base case: if left > right, no elements to process\n    if (left > right) {\n        return NULL;\n    }\n    \n    // Find the middle element to maintain balance\n    int mid = left + (right - left) / 2;\n    \n    // Create new node with middle element as root\n    struct TreeNode* root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n    root->val = nums[mid];\n    \n    // Recursively build left and right subtrees\n    root->left = helper(nums, left, mid - 1);\n    root->right = helper(nums, mid + 1, right);\n    \n    return root;\n}\n\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize) {\n    if (nums == NULL || numsSize == 0) {\n        return NULL;\n    }\n    \n    return helper(nums, 0, numsSize - 1);\n}",
      "timestamp": 1749302339,
      "statusCode": 10,
      "user": {
        "username": "IvanAssis",
        "profile": {
          "realName": "IvanAssis",
          "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
        }
      },
      "lang": {
        "name": "c",
        "verboseName": "C"
      },
      "question": {
        "questionId": "108",
        "titleSlug": "convert-sorted-array-to-binary-search-tree",
        "hasFrontendPreview": false
      },
      "notes": "",
      "flagType": "WHITE",
      "topicTags": [],
      "runtimeError": null,
      "compileError": null,
      "lastTestcase": "",
      "codeOutput": "",
      "expectedOutput": "",
      "totalCorrect": 31,
      "totalTestcases": 31,
      "fullCodeOutput": null,
      "testDescriptions": null,
      "testBodies": null,
      "testInfo": null,
      "stdOutput": ""
    }
  }
}
