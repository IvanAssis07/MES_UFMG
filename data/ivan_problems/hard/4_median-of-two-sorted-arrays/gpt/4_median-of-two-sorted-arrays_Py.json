{
    "data": {
        "submissionDetails": {
            "runtime": 0,
            "runtimeDisplay": "0 ms",
            "runtimePercentile": 100.0,
            "runtimeDistribution": "{\"lang\": \"python\", \"distribution\": [[\"0\", 36.0441], [\"1\", 12.689], [\"3\", 13.33], [\"4\", 7.070600000000001], [\"5\", 6.9705], [\"7\", 5.1077], [\"8\", 2.644], [\"9\", 2.3335], [\"11\", 1.2318], [\"12\", 0.9414], [\"13\", 0.8513], [\"15\", 0.4607], [\"16\", 0.3405], [\"17\", 0.3706], [\"19\", 0.1402], [\"20\", 0.1602], [\"21\", 0.1903], [\"23\", 0.0701], [\"24\", 0.1703], [\"25\", 0.1102], [\"27\", 0.1102], [\"28\", 0.1002], [\"29\", 0.1502], [\"31\", 0.1002], [\"32\", 0.0701], [\"33\", 0.03], [\"35\", 0.0501], [\"36\", 0.1101], [\"37\", 0.0801], [\"39\", 0.0401], [\"40\", 0.0701], [\"41\", 0.0601], [\"43\", 0.02], [\"44\", 0.04], [\"45\", 0.03], [\"47\", 0.0401], [\"48\", 0.0801], [\"49\", 0.0501], [\"51\", 0.02], [\"52\", 0.02], [\"53\", 0.05], [\"54\", 0.0601], [\"56\", 0.03], [\"57\", 0.13019999999999998], [\"58\", 0.0401], [\"60\", 0.0401], [\"61\", 0.0801], [\"62\", 0.01], [\"64\", 0.02], [\"65\", 0.0901], [\"66\", 0.0501], [\"68\", 0.0401], [\"69\", 0.0902], [\"70\", 0.03], [\"72\", 0.03], [\"73\", 0.0802], [\"74\", 0.02], [\"76\", 0.02], [\"77\", 0.1001], [\"78\", 0.02], [\"80\", 0.01], [\"81\", 0.0701], [\"82\", 0.01], [\"84\", 0.01], [\"85\", 0.0601], [\"86\", 0.02], [\"88\", 0.03], [\"89\", 0.0501], [\"90\", 0.01], [\"92\", 0.0401], [\"93\", 0.13019999999999998], [\"94\", 0.03], [\"96\", 0.0401], [\"97\", 0.18030000000000002], [\"98\", 0.1202], [\"100\", 0.0601], [\"101\", 0.2504], [\"102\", 0.0801], [\"104\", 0.1202], [\"105\", 0.1202]]}",
            "memory": 12644000,
            "memoryDisplay": "12.6 MB",
            "memoryPercentile": 50.09529999999999,
            "memoryDistribution": "{\"lang\": \"python\", \"distribution\": [[\"12000\", 0.01], [\"12200\", 0.01], [\"12300\", 0.0801], [\"12400\", 1.8327], [\"12500\", 20.3505], [\"12600\", 27.6214], [\"12700\", 39.6395]]}",
            "code": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        # Ensure nums1 is the smaller array to minimize binary search range\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m, n = len(nums1), len(nums2)\n        low, high = 0, m\n        \n        while low <= high:\n            i = (low + high) // 2\n            j = (m + n + 1) // 2 - i\n            \n            maxLeftA = float('-inf') if i == 0 else nums1[i - 1]\n            minRightA = float('inf') if i == m else nums1[i]\n            \n            maxLeftB = float('-inf') if j == 0 else nums2[j - 1]\n            minRightB = float('inf') if j == n else nums2[j]\n            \n            # Check if partition is correct\n            if maxLeftA <= minRightB and maxLeftB <= minRightA:\n                # Correct partition found, compute median\n                if (m + n) % 2 == 0:\n                    return (max(maxLeftA, maxLeftB) + min(minRightA, minRightB)) / 2.0\n                else:\n                    return max(maxLeftA, maxLeftB)\n            elif maxLeftA > minRightB:\n                # Need to move left in nums1\n                high = i - 1\n            else:\n                # Need to move right in nums1\n                low = i + 1\n",
            "timestamp": 1749158025,
            "statusCode": 10,
            "user": {
                "username": "IvanAssis",
                "profile": {
                    "realName": "IvanAssis",
                    "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
                }
            },
            "lang": {
                "name": "python",
                "verboseName": "Python"
            },
            "question": {
                "questionId": "4",
                "titleSlug": "median-of-two-sorted-arrays",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 2096,
            "totalTestcases": 2096,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}