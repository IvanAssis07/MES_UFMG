{
    "data": {
        "submissionDetails": {
            "runtime": 42,
            "runtimeDisplay": "42 ms",
            "runtimePercentile": 93.06930000000001,
            "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"25\", 0.9901], [\"32\", 0.9901], [\"37\", 0.9901], [\"38\", 1.9802], [\"39\", 0.9901], [\"41\", 0.9901], [\"43\", 2.9703], [\"44\", 1.9802], [\"46\", 0.9901], [\"48\", 2.9703], [\"49\", 0.9901], [\"50\", 3.9604], [\"51\", 4.9505], [\"52\", 3.9604], [\"53\", 2.9703], [\"54\", 1.9802], [\"55\", 1.9802], [\"56\", 3.9604], [\"58\", 0.9901], [\"59\", 0.9901], [\"60\", 2.9703], [\"61\", 2.9703], [\"62\", 0.9901], [\"63\", 1.9802], [\"64\", 4.9505], [\"65\", 1.9802], [\"66\", 1.9802], [\"67\", 2.9703], [\"68\", 6.9307], [\"69\", 0.9901], [\"70\", 2.9703], [\"71\", 0.9901], [\"72\", 1.9802], [\"73\", 1.9802], [\"74\", 0.9901], [\"75\", 1.9802], [\"78\", 0.9901], [\"79\", 1.9802], [\"82\", 1.9802], [\"83\", 0.9901], [\"84\", 1.9802], [\"85\", 0.9901], [\"91\", 0.9901], [\"93\", 0.9901], [\"94\", 0.9901]]}",
            "memory": 85476000,
            "memoryDisplay": "85.5 MB",
            "memoryPercentile": 92.07920000000001,
            "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"84000\", 1.9802], [\"84300\", 0.9901], [\"85200\", 0.9901], [\"85300\", 3.9604], [\"85500\", 0.9901], [\"85600\", 0.9901], [\"85700\", 0.9901], [\"85800\", 1.9802], [\"85900\", 11.8812], [\"86000\", 22.7723], [\"86100\", 11.8812], [\"86200\", 9.901], [\"86300\", 2.9703], [\"86800\", 0.9901], [\"86900\", 7.9208], [\"87000\", 3.9604], [\"87100\", 1.9802], [\"87200\", 4.9505], [\"87300\", 0.9901]]}",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int* maxHeap;      // For smaller half (max heap)\n    int* minHeap;      // For larger half (min heap)\n    int maxSize;       // Current size of max heap\n    int minSize;       // Current size of min heap\n    int maxCapacity;   // Capacity of max heap\n    int minCapacity;   // Capacity of min heap\n} MedianFinder;\n\n// Helper functions for max heap (smaller half)\nvoid maxHeapifyUp(int* heap, int index) {\n    if (index == 0) return;\n    int parent = (index - 1) / 2;\n    if (heap[index] > heap[parent]) {\n        int temp = heap[index];\n        heap[index] = heap[parent];\n        heap[parent] = temp;\n        maxHeapifyUp(heap, parent);\n    }\n}\n\nvoid maxHeapifyDown(int* heap, int size, int index) {\n    int largest = index;\n    int left = 2 * index + 1;\n    int right = 2 * index + 2;\n    \n    if (left < size && heap[left] > heap[largest])\n        largest = left;\n    if (right < size && heap[right] > heap[largest])\n        largest = right;\n    \n    if (largest != index) {\n        int temp = heap[index];\n        heap[index] = heap[largest];\n        heap[largest] = temp;\n        maxHeapifyDown(heap, size, largest);\n    }\n}\n\n// Helper functions for min heap (larger half)\nvoid minHeapifyUp(int* heap, int index) {\n    if (index == 0) return;\n    int parent = (index - 1) / 2;\n    if (heap[index] < heap[parent]) {\n        int temp = heap[index];\n        heap[index] = heap[parent];\n        heap[parent] = temp;\n        minHeapifyUp(heap, parent);\n    }\n}\n\nvoid minHeapifyDown(int* heap, int size, int index) {\n    int smallest = index;\n    int left = 2 * index + 1;\n    int right = 2 * index + 2;\n    \n    if (left < size && heap[left] < heap[smallest])\n        smallest = left;\n    if (right < size && heap[right] < heap[smallest])\n        smallest = right;\n    \n    if (smallest != index) {\n        int temp = heap[index];\n        heap[index] = heap[smallest];\n        heap[smallest] = temp;\n        minHeapifyDown(heap, size, smallest);\n    }\n}\n\nMedianFinder* medianFinderCreate() {\n    MedianFinder* obj = (MedianFinder*)malloc(sizeof(MedianFinder));\n    obj->maxCapacity = 25000;  // Half of max calls\n    obj->minCapacity = 25000;\n    obj->maxHeap = (int*)malloc(obj->maxCapacity * sizeof(int));\n    obj->minHeap = (int*)malloc(obj->minCapacity * sizeof(int));\n    obj->maxSize = 0;\n    obj->minSize = 0;\n    return obj;\n}\n\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n    // Add to max heap (smaller half) if it's empty or num is smaller than max heap top\n    if (obj->maxSize == 0 || num <= obj->maxHeap[0]) {\n        obj->maxHeap[obj->maxSize] = num;\n        maxHeapifyUp(obj->maxHeap, obj->maxSize);\n        obj->maxSize++;\n    } else {\n        // Add to min heap (larger half)\n        obj->minHeap[obj->minSize] = num;\n        minHeapifyUp(obj->minHeap, obj->minSize);\n        obj->minSize++;\n    }\n    \n    // Balance the heaps\n    // Max heap should have at most one more element than min heap\n    if (obj->maxSize > obj->minSize + 1) {\n        // Move top of max heap to min heap\n        int top = obj->maxHeap[0];\n        obj->maxHeap[0] = obj->maxHeap[obj->maxSize - 1];\n        obj->maxSize--;\n        maxHeapifyDown(obj->maxHeap, obj->maxSize, 0);\n        \n        obj->minHeap[obj->minSize] = top;\n        minHeapifyUp(obj->minHeap, obj->minSize);\n        obj->minSize++;\n    } else if (obj->minSize > obj->maxSize) {\n        // Move top of min heap to max heap\n        int top = obj->minHeap[0];\n        obj->minHeap[0] = obj->minHeap[obj->minSize - 1];\n        obj->minSize--;\n        minHeapifyDown(obj->minHeap, obj->minSize, 0);\n        \n        obj->maxHeap[obj->maxSize] = top;\n        maxHeapifyUp(obj->maxHeap, obj->maxSize);\n        obj->maxSize++;\n    }\n}\n\ndouble medianFinderFindMedian(MedianFinder* obj) {\n    if (obj->maxSize > obj->minSize) {\n        return (double)obj->maxHeap[0];\n    } else {\n        return (obj->maxHeap[0] + obj->minHeap[0]) / 2.0;\n    }\n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    free(obj->maxHeap);\n    free(obj->minHeap);\n    free(obj);\n}",
            "timestamp": 1749305535,
            "statusCode": 10,
            "user": {
                "username": "IvanAssis",
                "profile": {
                    "realName": "IvanAssis",
                    "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
                }
            },
            "lang": {
                "name": "c",
                "verboseName": "C"
            },
            "question": {
                "questionId": "295",
                "titleSlug": "find-median-from-data-stream",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 21,
            "totalTestcases": 21,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}