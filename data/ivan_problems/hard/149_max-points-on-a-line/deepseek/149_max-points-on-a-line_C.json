{
    "data": {
        "submissionDetails": {
            "runtime": 27,
            "runtimeDisplay": "27 ms",
            "runtimePercentile": 69.36939999999998,
            "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"4\", 1.8018], [\"6\", 1.8018], [\"7\", 3.6036], [\"8\", 1.8018], [\"9\", 0.9009], [\"10\", 0.9009], [\"11\", 4.5045], [\"12\", 0.9009], [\"13\", 0.9009], [\"14\", 0.9009], [\"15\", 4.5045], [\"19\", 1.8018], [\"20\", 0.9009], [\"23\", 2.7027], [\"26\", 2.7027], [\"27\", 1.8018], [\"30\", 1.8018], [\"31\", 0.9009], [\"34\", 0.9009], [\"35\", 0.9009], [\"37\", 0.9009], [\"38\", 1.8018], [\"43\", 0.9009], [\"45\", 0.9009], [\"47\", 2.7027], [\"48\", 0.9009], [\"50\", 0.9009], [\"51\", 1.8018], [\"52\", 0.9009], [\"54\", 2.7027], [\"55\", 2.7027], [\"56\", 1.8018], [\"57\", 0.9009], [\"59\", 0.9009], [\"61\", 0.9009], [\"63\", 0.9009], [\"66\", 0.9009], [\"67\", 0.9009], [\"73\", 0.9009], [\"92\", 0.9009], [\"95\", 0.9009], [\"99\", 0.9009], [\"100\", 0.9009], [\"106\", 1.8018], [\"109\", 1.8018], [\"111\", 0.9009], [\"113\", 0.9009], [\"114\", 0.9009], [\"115\", 0.9009], [\"123\", 1.8018], [\"124\", 0.9009], [\"126\", 0.9009], [\"127\", 2.7027], [\"129\", 2.7027], [\"130\", 1.8018], [\"131\", 0.9009], [\"132\", 0.9009], [\"135\", 0.9009], [\"138\", 1.8018], [\"171\", 0.9009], [\"175\", 0.9009], [\"179\", 1.8018], [\"182\", 1.8018], [\"185\", 0.9009]]}",
            "memory": 10160000,
            "memoryDisplay": "10.2 MB",
            "memoryPercentile": 22.522600000000004,
            "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"8600\", 3.6036], [\"8700\", 17.1171], [\"8800\", 25.2252], [\"8900\", 10.8108], [\"9000\", 6.3063], [\"9100\", 6.3063], [\"9200\", 3.6036], [\"9300\", 1.8018], [\"9400\", 0.9009], [\"9500\", 0.9009], [\"9600\", 0.9009], [\"10200\", 0.9009], [\"10500\", 0.9009], [\"10800\", 1.8018], [\"10900\", 0.9009], [\"11000\", 3.6036], [\"11200\", 0.9009], [\"13900\", 0.9009], [\"18300\", 0.9009], [\"19400\", 0.9009], [\"22700\", 0.9009], [\"22800\", 1.8018], [\"25300\", 0.9009], [\"25700\", 0.9009], [\"27000\", 0.9009]]}",
            "code": "#include <stdlib.h>\n#include <string.h>\n\ntypedef struct {\n    int dx;\n    int dy;\n} Slope;\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint maxPoints(int** points, int pointsSize, int* pointsColSize) {\n    if (pointsSize <= 2) {\n        return pointsSize;\n    }\n    \n    int maxCount = 0;\n    \n    for (int i = 0; i < pointsSize; i++) {\n        // Map to store the count of slopes. Key is a string representation \"dx/dy\".\n        // Alternatively, we can use a custom struct with dx and dy, but handling with strings here.\n        // However, in C, it's more efficient to use a custom struct and a simple hash or just compare.\n        // For simplicity, we'll use an array of slopes and count manually.\n        \n        Slope* slopes = (Slope*)malloc((pointsSize - 1) * sizeof(Slope));\n        int slopeCount = 0;\n        int duplicate = 0;\n        int currentMax = 0;\n        \n        for (int j = 0; j < pointsSize; j++) {\n            if (i == j) continue;\n            \n            int dx = points[j][0] - points[i][0];\n            int dy = points[j][1] - points[i][1];\n            \n            int g = gcd(dx, dy);\n            if (g != 0) {\n                dx /= g;\n                dy /= g;\n            }\n            \n            // Ensure consistent representation, e.g., make sure -1/2 is stored the same as 1/-2.\n            if (dx < 0 || (dx == 0 && dy < 0)) {\n                dx = -dx;\n                dy = -dy;\n            }\n            \n            slopes[slopeCount].dx = dx;\n            slopes[slopeCount].dy = dy;\n            slopeCount++;\n        }\n        \n        // Now, count the occurrences of each slope in the slopes array.\n        for (int k = 0; k < slopeCount; k++) {\n            int count = 1;\n            if (slopes[k].dx == -1 && slopes[k].dy == -1) {\n                // Already processed as 1/1 after negation.\n                continue;\n            }\n            for (int l = k + 1; l < slopeCount; l++) {\n                if (slopes[k].dx == slopes[l].dx && slopes[k].dy == slopes[l].dy) {\n                    count++;\n                    // Mark as processed.\n                    slopes[l].dx = -1;\n                    slopes[l].dy = -1;\n                }\n            }\n            if (count > currentMax) {\n                currentMax = count;\n            }\n        }\n        \n        free(slopes);\n        \n        currentMax += 1; // including the point[i] itself.\n        if (currentMax > maxCount) {\n            maxCount = currentMax;\n        }\n    }\n    \n    return maxCount;\n}",
            "timestamp": 1749305224,
            "statusCode": 10,
            "user": {
                "username": "IvanAssis",
                "profile": {
                    "realName": "IvanAssis",
                    "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
                }
            },
            "lang": {
                "name": "c",
                "verboseName": "C"
            },
            "question": {
                "questionId": "149",
                "titleSlug": "max-points-on-a-line",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 41,
            "totalTestcases": 41,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}