{
  "data": {
    "submissionDetails": {
      "runtime": 27,
      "runtimeDisplay": "27 ms",
      "runtimePercentile": 77.4182,
      "runtimeDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"9\", 9.9177], [\"28\", 38.57200000000001], [\"48\", 18.614499999999996], [\"67\", 8.849499999999997], [\"86\", 3.6616], [\"105\", 1.8308], [\"125\", 1.0984], [\"144\", 0.8542], [\"163\", 1.4644999999999997], [\"182\", 0.6101], [\"201\", 0.7625999999999997], [\"221\", 0.7017], [\"240\", 0.5184999999999997], [\"259\", 0.36599999999999994], [\"278\", 0.1525], [\"298\", 0.244], [\"317\", 0.122], [\"336\", 0.061], [\"355\", 0.27449999999999997], [\"375\", 0.0305], [\"394\", 0.1525], [\"413\", 0.122], [\"432\", 0.244], [\"452\", 0.061], [\"471\", 0.27449999999999997], [\"490\", 0.122], [\"509\", 0.427], [\"529\", 0.5796], [\"548\", 0.244], [\"567\", 0.2135], [\"586\", 0.1525], [\"605\", 0.183], [\"625\", 0.244], [\"644\", 0.27449999999999997], [\"663\", 0.0305], [\"682\", 0.0305], [\"702\", 0.0305], [\"721\", 0.27449999999999997], [\"740\", 0.1525], [\"759\", 0.2135], [\"779\", 0.122], [\"798\", 0.0305], [\"817\", 0.0305], [\"836\", 0.122], [\"856\", 0.061], [\"875\", 0.0305], [\"894\", 0.0305], [\"913\", 0.0305], [\"933\", 0.061], [\"952\", 0.061], [\"971\", 0.122], [\"990\", 0.0305], [\"1009\", 0.0305], [\"1029\", 0.061], [\"1048\", 0.0305], [\"1067\", 0.061], [\"1086\", 0.0305], [\"1106\", 0.0305], [\"1125\", 0.0305], [\"1144\", 0.122], [\"1163\", 0.0305], [\"1183\", 0.061], [\"1202\", 0.0305], [\"1221\", 0.061], [\"1240\", 0.0915], [\"1260\", 0.1831], [\"1279\", 0.122], [\"1298\", 0.0305], [\"1317\", 0.0305], [\"1337\", 0.0305], [\"1356\", 0.0305], [\"1375\", 0.061], [\"1394\", 0.0305], [\"1413\", 0.061], [\"1433\", 0.122], [\"1452\", 0.0305], [\"1471\", 0.0305], [\"1490\", 0.061], [\"1510\", 0.0305]]}",
      "memory": 18048000,
      "memoryDisplay": "18 MB",
      "memoryPercentile": 36.466299999999976,
      "memoryDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"17553\", 28.0134], [\"17859\", 49.6491], [\"18165\", 2.8075], [\"18471\", 0.1525], [\"18778\", 0.0305], [\"19084\", 0.0305], [\"19390\", 0.0305], [\"19696\", 0.0305], [\"20003\", 0.061], [\"20309\", 0.0305], [\"20615\", 0.2441], [\"20921\", 0.1831], [\"21228\", 0.1525], [\"21534\", 0.1526], [\"21840\", 0.061], [\"22146\", 0.0305], [\"22453\", 0.0305], [\"22759\", 0.061], [\"23065\", 0.3357], [\"23371\", 0.0915], [\"23678\", 0.2136], [\"23984\", 0.0305], [\"24290\", 0.061], [\"24596\", 0.061], [\"24903\", 0.0305], [\"25209\", 0.1526], [\"25515\", 0.061], [\"25821\", 0.3357], [\"26128\", 0.2136], [\"26434\", 0.061], [\"26740\", 0.4272], [\"27046\", 0.9766], [\"27353\", 0.061], [\"27659\", 0.061], [\"27965\", 0.1831], [\"28271\", 0.122], [\"28578\", 0.0915], [\"28884\", 0.183], [\"29190\", 0.5187], [\"29496\", 0.0915], [\"29803\", 0.061], [\"30109\", 0.6408], [\"30415\", 0.2746], [\"30721\", 0.1525], [\"31028\", 0.1525], [\"31334\", 0.061], [\"31640\", 0.061], [\"31946\", 0.0305], [\"32253\", 0.21359999999999998], [\"32559\", 0.1831], [\"32865\", 0.0915], [\"33171\", 0.1525], [\"33478\", 0.0305], [\"33784\", 0.061], [\"34090\", 0.3968], [\"34396\", 0.0915], [\"34703\", 0.0305], [\"35009\", 0.0305], [\"35315\", 0.0305], [\"35621\", 0.061], [\"35928\", 0.0305], [\"36234\", 0.0305], [\"36540\", 0.5188], [\"36846\", 1.3121], [\"37153\", 0.6713], [\"37459\", 0.061], [\"37765\", 0.061], [\"38071\", 0.061], [\"38378\", 0.061], [\"38684\", 0.1221], [\"38990\", 0.1221], [\"39296\", 0.1525], [\"39603\", 0.36610000000000004], [\"39909\", 0.122], [\"40215\", 0.2441], [\"40521\", 0.0305], [\"40828\", 0.0305], [\"41134\", 0.2136], [\"41440\", 0.122], [\"41746\", 1.1596]]}",
      "code": "from typing import List\nfrom math import gcd\nfrom collections import defaultdict\n\nclass Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        if len(points) <= 2:\n            return len(points)\n        \n        def get_slope(p1, p2):\n            \"\"\"\n            Calculate slope between two points as a reduced fraction.\n            Returns a tuple (dy, dx) representing dy/dx in reduced form.\n            For vertical lines, returns ('inf', 0) as a special case.\n            \"\"\"\n            dx = p2[0] - p1[0]\n            dy = p2[1] - p1[1]\n            \n            if dx == 0:  # Vertical line\n                return ('inf', 0)\n            \n            if dy == 0:  # Horizontal line\n                return (0, 1)\n            \n            # Reduce the fraction using GCD\n            g = gcd(abs(dx), abs(dy))\n            dx //= g\n            dy //= g\n            \n            # Normalize: make denominator positive\n            if dx < 0:\n                dx = -dx\n                dy = -dy\n                \n            return (dy, dx)\n        \n        max_count = 2\n        \n        # For each point as base point\n        for i in range(len(points)):\n            slope_count = defaultdict(int)\n            \n            # Count points on lines passing through points[i]\n            for j in range(i + 1, len(points)):\n                slope = get_slope(points[i], points[j])\n                slope_count[slope] += 1\n            \n            # Find maximum count for current base point\n            if slope_count:\n                current_max = max(slope_count.values()) + 1  # +1 for the base point itself\n                max_count = max(max_count, current_max)\n        \n        return max_count",
      "timestamp": 1749305341,
      "statusCode": 10,
      "user": {
        "username": "IvanAssis",
        "profile": {
          "realName": "IvanAssis",
          "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
        }
      },
      "lang": {
        "name": "python3",
        "verboseName": "Python3"
      },
      "question": {
        "questionId": "149",
        "titleSlug": "max-points-on-a-line",
        "hasFrontendPreview": false
      },
      "notes": "",
      "flagType": "WHITE",
      "topicTags": [],
      "runtimeError": null,
      "compileError": null,
      "lastTestcase": "",
      "codeOutput": "",
      "expectedOutput": "",
      "totalCorrect": 41,
      "totalTestcases": 41,
      "fullCodeOutput": null,
      "testDescriptions": null,
      "testBodies": null,
      "testInfo": null,
      "stdOutput": ""
    }
  }
}
