{
    "data": {
        "submissionDetails": {
            "runtime": 375,
            "runtimeDisplay": "375 ms",
            "runtimePercentile": 42.90850000000037,
            "runtimeDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"9\", 0.317], [\"27\", 0.1585], [\"46\", 0.1585], [\"64\", 0.0396], [\"83\", 0.0396], [\"101\", 0.0396], [\"120\", 0.198], [\"138\", 0.198], [\"157\", 0.0792], [\"175\", 0.3169], [\"194\", 1.1886], [\"213\", 1.2676999999999998], [\"231\", 2.6148], [\"250\", 12.202700000000002], [\"268\", 11.093600000000002], [\"287\", 9.4693], [\"305\", 7.488100000000001], [\"324\", 4.3187000000000015], [\"342\", 2.4563000000000006], [\"361\", 3.2884000000000007], [\"379\", 4.754200000000001], [\"398\", 5.0714], [\"416\", 4.952800000000002], [\"435\", 3.7640000000000007], [\"453\", 3.4866000000000006], [\"472\", 2.3772], [\"490\", 1.9414000000000002], [\"509\", 1.347], [\"527\", 1.3866000000000003], [\"546\", 1.0695000000000001], [\"565\", 0.8714], [\"583\", 0.7129000000000002], [\"602\", 0.6732999999999999], [\"620\", 0.7129000000000001], [\"639\", 0.5149], [\"657\", 0.5148], [\"676\", 0.35640000000000005], [\"694\", 0.5546], [\"713\", 0.35640000000000005], [\"731\", 0.1584], [\"750\", 0.3169], [\"768\", 0.1584], [\"787\", 0.0396], [\"805\", 0.0396], [\"824\", 0.0792], [\"842\", 0.198], [\"861\", 0.1584], [\"879\", 0.1584], [\"898\", 0.0792], [\"916\", 0.1584], [\"935\", 0.0396], [\"954\", 0.0396], [\"972\", 0.0396], [\"991\", 0.0396], [\"1009\", 0.0396], [\"1028\", 0.0396], [\"1046\", 0.0396], [\"1065\", 0.0396], [\"1083\", 0.198], [\"1102\", 0.0396], [\"1120\", 0.0396], [\"1139\", 0.0396], [\"1157\", 0.0792], [\"1176\", 0.0396], [\"1194\", 0.0396], [\"1213\", 0.0792], [\"1231\", 0.0396], [\"1250\", 0.0396], [\"1268\", 0.0396], [\"1287\", 0.0396], [\"1306\", 0.0396]]}",
            "memory": 42040000,
            "memoryDisplay": "42 MB",
            "memoryPercentile": 82.96370000000014,
            "memoryDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"35873\", 0.0792], [\"36019\", 0.0396], [\"36165\", 0.0396], [\"36311\", 0.0792], [\"36458\", 0.1189], [\"36604\", 0.0396], [\"36750\", 0.0792], [\"36896\", 0.1189], [\"37043\", 0.0792], [\"37189\", 0.1189], [\"37335\", 0.8716], [\"37481\", 0.3566], [\"37628\", 0.1585], [\"37774\", 0.0396], [\"37920\", 0.0396], [\"38066\", 0.0396], [\"38213\", 0.0792], [\"38359\", 0.0396], [\"38505\", 0.0792], [\"38651\", 0.1189], [\"38798\", 0.0792], [\"38944\", 0.0396], [\"39090\", 0.0396], [\"39236\", 0.0792], [\"39383\", 0.0792], [\"39529\", 0.1189], [\"39675\", 0.1981], [\"39821\", 0.1981], [\"39968\", 0.1981], [\"40114\", 0.317], [\"40260\", 0.0396], [\"40406\", 0.1585], [\"40553\", 0.1585], [\"40699\", 0.1585], [\"40845\", 0.0396], [\"40991\", 0.0396], [\"41138\", 0.1189], [\"41284\", 0.1189], [\"41430\", 0.1189], [\"41576\", 0.9113], [\"41723\", 1.7036], [\"41869\", 9.5087], [\"42015\", 12.5594], [\"42161\", 13.2726], [\"42308\", 1.5055], [\"42454\", 1.0697], [\"42600\", 3.4469], [\"42746\", 27.139400000000002], [\"42893\", 6.6165], [\"43039\", 2.5753], [\"43185\", 0.2377], [\"43331\", 0.43579999999999997], [\"43478\", 0.2377], [\"43624\", 0.4754], [\"43770\", 2.0206], [\"43916\", 1.7433], [\"44063\", 0.6339], [\"44209\", 0.1981], [\"44355\", 0.317], [\"44501\", 0.0792], [\"44648\", 0.2377], [\"44794\", 0.0396], [\"44940\", 0.1585], [\"45086\", 0.0792], [\"45233\", 0.1189], [\"45379\", 0.0792], [\"45525\", 0.0396], [\"45671\", 0.1585], [\"45818\", 0.1189], [\"45964\", 0.11880000000000002], [\"46110\", 0.0396], [\"46256\", 0.11880000000000002], [\"46403\", 0.0792], [\"46549\", 0.7924], [\"46695\", 0.3566], [\"46841\", 0.1585], [\"46988\", 0.0396], [\"47134\", 0.2773], [\"47280\", 0.1981], [\"47426\", 0.1189]]}",
            "code": "import heapq\nfrom typing import List\n\nclass Solution:\n    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -> int:\n        n = len(profits)\n        \n        # Create min-heap of projects sorted by capital requirement\n        # Each element is (capital_needed, profit)\n        projects = [(capital[i], profits[i]) for i in range(n)]\n        heapq.heapify(projects)\n        \n        # Max-heap for profits of affordable projects\n        # Python's heapq is min-heap, so we negate profits for max-heap behavior\n        affordable_profits = []\n        \n        current_capital = w\n        \n        # Execute at most k projects\n        for _ in range(k):\n            # Move all affordable projects from projects heap to profits heap\n            while projects and projects[0][0] <= current_capital:\n                capital_needed, profit = heapq.heappop(projects)\n                heapq.heappush(affordable_profits, -profit)  # Negative for max-heap\n            \n            # If no projects are affordable, we can't do more\n            if not affordable_profits:\n                break\n            \n            # Take the project with maximum profit\n            max_profit = -heapq.heappop(affordable_profits)\n            current_capital += max_profit\n        \n        return current_capital",
            "timestamp": 1749306080,
            "statusCode": 10,
            "user": {
                "username": "IvanAssis",
                "profile": {
                    "realName": "IvanAssis",
                    "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
                }
            },
            "lang": {
                "name": "python3",
                "verboseName": "Python3"
            },
            "question": {
                "questionId": "502",
                "titleSlug": "ipo",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 40,
            "totalTestcases": 40,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}