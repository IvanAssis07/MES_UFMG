{
  "data": {
    "submissionDetails": {
      "runtime": 19,
      "runtimeDisplay": "19 ms",
      "runtimePercentile": 27.361199999999993,
      "runtimeDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"19\", 81.9505], [\"58\", 2.112800000000001], [\"97\", 0.2056], [\"136\", 0.08450000000000002], [\"176\", 0.060300000000000006], [\"215\", 0.04000000000000001], [\"254\", 0.02], [\"293\", 0.004], [\"332\", 0.012], [\"371\", 0.008], [\"410\", 0.008], [\"449\", 0.004], [\"488\", 0.0322], [\"528\", 0.008], [\"567\", 0.004], [\"606\", 0.004], [\"645\", 0.004], [\"684\", 0.008], [\"723\", 0.02], [\"762\", 0.0281], [\"801\", 0.008], [\"840\", 0.016], [\"880\", 0.08460000000000001], [\"919\", 0.04830000000000001], [\"958\", 0.07640000000000001], [\"997\", 0.1491], [\"1036\", 0.13260000000000002], [\"1075\", 0.6340999999999999], [\"1114\", 2.2788000000000004], [\"1153\", 1.4057], [\"1192\", 0.34329999999999994], [\"1232\", 0.169], [\"1271\", 0.12860000000000002], [\"1310\", 0.08420000000000004], [\"1349\", 0.09659999999999999], [\"1388\", 0.10050000000000002], [\"1427\", 0.10040000000000004], [\"1466\", 0.10850000000000003], [\"1505\", 0.0644], [\"1544\", 0.060100000000000015], [\"1584\", 0.05220000000000001], [\"1623\", 0.0884], [\"1662\", 0.12470000000000003], [\"1701\", 0.05210000000000002], [\"1740\", 0.1774], [\"1779\", 0.23399999999999999], [\"1818\", 0.22150000000000003], [\"1857\", 0.11660000000000002], [\"1896\", 0.08440000000000002], [\"1936\", 0.08440000000000002], [\"1975\", 0.06430000000000001], [\"2014\", 0.06010000000000003], [\"2053\", 0.07630000000000002], [\"2092\", 0.03610000000000001], [\"2131\", 0.07640000000000001], [\"2170\", 0.08850000000000001], [\"2209\", 0.05220000000000001], [\"2248\", 0.06410000000000002], [\"2288\", 0.04010000000000001], [\"2327\", 0.04000000000000001], [\"2366\", 0.044100000000000014], [\"2405\", 0.0281], [\"2444\", 0.036000000000000004], [\"2483\", 0.060100000000000015], [\"2522\", 0.07220000000000003], [\"2561\", 0.060300000000000006], [\"2600\", 0.04000000000000001], [\"2640\", 0.06020000000000002], [\"2679\", 0.08010000000000003], [\"2718\", 0.08020000000000002], [\"2757\", 0.12470000000000003], [\"2796\", 0.14090000000000003], [\"2835\", 0.13680000000000003], [\"2874\", 0.17310000000000003], [\"2913\", 0.1814], [\"2952\", 0.2015], [\"2992\", 0.24219999999999997], [\"3031\", 0.2016], [\"3070\", 0.28679999999999994], [\"3109\", 0.2056]]}",
      "memory": 20040000,
      "memoryDisplay": "20 MB",
      "memoryPercentile": 89.77959999999997,
      "memoryDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"18500\", 0.004], [\"18800\", 0.004], [\"19200\", 0.004], [\"19300\", 0.004], [\"19600\", 0.0081], [\"19700\", 0.0121], [\"19800\", 0.1818], [\"19900\", 2.1572], [\"20000\", 7.8452], [\"20100\", 19.6897], [\"20200\", 15.8843], [\"20300\", 17.9001], [\"20400\", 18.3041], [\"20500\", 8.031], [\"20600\", 1.7007], [\"20700\", 0.7837], [\"20800\", 0.4888], [\"20900\", 0.3919], [\"21000\", 0.2545], [\"21100\", 0.606]]}",
      "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        # Handle edge cases\n        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        \n        # Divide and conquer approach\n        while len(lists) > 1:\n            merged_lists = []\n            \n            # Merge pairs of lists\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                l2 = lists[i + 1] if i + 1 < len(lists) else None\n                merged_lists.append(self.mergeTwoLists(l1, l2))\n            \n            lists = merged_lists\n        \n        return lists[0]\n    \n    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        \"\"\"Helper function to merge two sorted linked lists\"\"\"\n        # Create dummy head to simplify logic\n        dummy = ListNode(0)\n        current = dummy\n        \n        # Merge the two lists by comparing values\n        while l1 and l2:\n            if l1.val <= l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n        \n        # Attach remaining nodes\n        current.next = l1 if l1 else l2\n        \n        return dummy.next",
      "timestamp": 1749305029,
      "statusCode": 10,
      "user": {
        "username": "IvanAssis",
        "profile": {
          "realName": "IvanAssis",
          "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
        }
      },
      "lang": {
        "name": "python3",
        "verboseName": "Python3"
      },
      "question": {
        "questionId": "23",
        "titleSlug": "merge-k-sorted-lists",
        "hasFrontendPreview": false
      },
      "notes": "",
      "flagType": "WHITE",
      "topicTags": [],
      "runtimeError": null,
      "compileError": null,
      "lastTestcase": "",
      "codeOutput": "",
      "expectedOutput": "",
      "totalCorrect": 134,
      "totalTestcases": 134,
      "fullCodeOutput": null,
      "testDescriptions": null,
      "testBodies": null,
      "testInfo": null,
      "stdOutput": ""
    }
  }
}
