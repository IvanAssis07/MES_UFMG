{
    "data": {
        "submissionDetails": {
            "runtime": 0,
            "runtimeDisplay": "0 ms",
            "runtimePercentile": 100.0,
            "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"1\", 64.6163], [\"5\", 4.628], [\"8\", 0.5859000000000001], [\"12\", 0.293], [\"15\", 0.1758], [\"19\", 0.3515], [\"22\", 0.2344], [\"26\", 0.0586], [\"29\", 0.0586], [\"33\", 0.0586], [\"37\", 0.0586], [\"40\", 0.1172], [\"44\", 0.0586], [\"47\", 0.0586], [\"51\", 0.0586], [\"54\", 0.0586], [\"58\", 0.0586], [\"61\", 0.0586], [\"65\", 0.0586], [\"68\", 0.0586], [\"72\", 0.1172], [\"75\", 0.0586], [\"79\", 0.0586], [\"82\", 0.1172], [\"86\", 0.0586], [\"89\", 0.0586], [\"93\", 0.0586], [\"96\", 0.0586], [\"100\", 0.0586], [\"103\", 0.0586], [\"107\", 0.1757], [\"111\", 0.1757], [\"114\", 0.0586], [\"118\", 0.1172], [\"121\", 0.1172], [\"125\", 0.0586], [\"128\", 0.1172], [\"132\", 0.4687], [\"135\", 0.1172], [\"139\", 0.1172], [\"142\", 0.1757], [\"146\", 0.8787], [\"149\", 0.1757], [\"153\", 0.1172], [\"156\", 0.9373], [\"160\", 0.1757], [\"163\", 0.0586], [\"167\", 0.4687], [\"170\", 1.1716], [\"174\", 0.7616], [\"178\", 1.8745999999999998], [\"181\", 2.2847], [\"185\", 1.2303000000000002], [\"188\", 1.6402999999999999], [\"192\", 0.703], [\"195\", 0.8787], [\"199\", 0.2929], [\"202\", 0.4101], [\"206\", 0.1172], [\"209\", 0.0586], [\"213\", 0.2344], [\"216\", 0.1758], [\"220\", 0.4101], [\"223\", 0.1172], [\"227\", 0.35150000000000003], [\"230\", 0.1758], [\"234\", 0.3515], [\"237\", 0.1758], [\"241\", 0.6444000000000001], [\"244\", 0.1172], [\"248\", 0.4687], [\"252\", 0.1758], [\"255\", 0.5858], [\"259\", 0.703], [\"262\", 0.2344], [\"266\", 0.35150000000000003], [\"269\", 0.7030000000000001], [\"273\", 0.1758], [\"276\", 0.2343], [\"280\", 0.1758]]}",
            "memory": 14112000,
            "memoryDisplay": "14.1 MB",
            "memoryPercentile": 22.554200000000016,
            "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"13700\", 4.3937], [\"13800\", 24.0187], [\"13900\", 24.7803], [\"14000\", 14.5284], [\"14100\", 9.7247], [\"14200\", 5.0381], [\"14300\", 2.3433], [\"14400\", 1.2888], [\"14500\", 1.5231], [\"14600\", 1.9332], [\"14700\", 1.6989], [\"14800\", 0.703], [\"14900\", 1.1716], [\"15000\", 0.8787], [\"15100\", 0.0586], [\"15200\", 0.2343], [\"15400\", 0.1757], [\"15500\", 0.1172], [\"15600\", 0.2343], [\"15700\", 0.1172]]}",
            "code": "#include <stdlib.h>\n\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    if (l1 == NULL) return l2;\n    if (l2 == NULL) return l1;\n    \n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    dummy.next = NULL;\n    \n    while (l1 != NULL && l2 != NULL) {\n        if (l1->val <= l2->val) {\n            tail->next = l1;\n            l1 = l1->next;\n        } else {\n            tail->next = l2;\n            l2 = l2->next;\n        }\n        tail = tail->next;\n    }\n    \n    tail->next = (l1 != NULL) ? l1 : l2;\n    return dummy.next;\n}\n\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {\n    if (listsSize == 0) return NULL;\n    \n    int interval = 1;\n    while (interval < listsSize) {\n        for (int i = 0; i < listsSize - interval; i += 2 * interval) {\n            lists[i] = mergeTwoLists(lists[i], lists[i + interval]);\n        }\n        interval *= 2;\n    }\n    \n    return lists[0];\n}",
            "timestamp": 1749426267,
            "statusCode": 10,
            "user": {
                "username": "IvanAssis",
                "profile": {
                    "realName": "IvanAssis",
                    "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
                }
            },
            "lang": {
                "name": "c",
                "verboseName": "C"
            },
            "question": {
                "questionId": "23",
                "titleSlug": "merge-k-sorted-lists",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 134,
            "totalTestcases": 134,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}
