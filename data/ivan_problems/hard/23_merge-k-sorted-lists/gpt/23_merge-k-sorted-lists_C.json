{
    "data": {
        "submissionDetails": {
            "runtime": 0,
            "runtimeDisplay": "N/A",
            "runtimePercentile": null,
            "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"1\", 64.4165], [\"5\", 4.576700000000001], [\"8\", 0.5721], [\"12\", 0.34320000000000006], [\"16\", 0.1716], [\"19\", 0.34320000000000006], [\"23\", 0.1144], [\"26\", 0.0572], [\"30\", 0.1144], [\"33\", 0.0572], [\"37\", 0.1144], [\"41\", 0.0572], [\"44\", 0.0572], [\"48\", 0.0572], [\"51\", 0.0572], [\"55\", 0.0572], [\"58\", 0.0572], [\"62\", 0.0572], [\"66\", 0.0572], [\"69\", 0.0572], [\"73\", 0.1144], [\"76\", 0.0572], [\"80\", 0.1144], [\"84\", 0.1144], [\"87\", 0.0572], [\"91\", 0.0572], [\"94\", 0.0572], [\"98\", 0.0572], [\"101\", 0.0572], [\"105\", 0.1716], [\"109\", 0.1716], [\"112\", 0.0572], [\"116\", 0.1144], [\"119\", 0.1144], [\"123\", 0.0572], [\"126\", 0.1144], [\"130\", 0.4005], [\"134\", 0.1144], [\"137\", 0.1144], [\"141\", 0.1144], [\"144\", 0.8581], [\"148\", 0.1716], [\"151\", 0.0572], [\"155\", 0.1144], [\"159\", 0.7437], [\"162\", 0.286], [\"166\", 0.1144], [\"169\", 0.4577], [\"173\", 1.373], [\"176\", 2.2311], [\"180\", 2.0023], [\"184\", 1.2586], [\"187\", 1.4874], [\"191\", 1.2585000000000002], [\"194\", 0.8008], [\"198\", 0.34320000000000006], [\"201\", 0.2288], [\"205\", 0.2288], [\"209\", 0.2288], [\"212\", 0.5148], [\"216\", 0.2288], [\"219\", 0.1716], [\"223\", 0.34320000000000006], [\"227\", 0.1144], [\"230\", 0.40040000000000003], [\"234\", 0.28600000000000003], [\"237\", 0.2288], [\"241\", 0.6292], [\"244\", 0.1144], [\"248\", 0.5149], [\"252\", 0.1716], [\"255\", 0.5720000000000001], [\"259\", 0.7437], [\"262\", 0.1716], [\"266\", 0.5148], [\"269\", 0.5720000000000001], [\"273\", 0.3432], [\"277\", 0.0572], [\"280\", 0.28600000000000003], [\"284\", 0.0572]]}",
            "memory": 0,
            "memoryDisplay": "N/A",
            "memoryPercentile": null,
            "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"13700\", 4.2906], [\"13800\", 23.8558], [\"13900\", 24.7712], [\"14000\", 14.7025], [\"14100\", 9.611], [\"14200\", 5.0343], [\"14300\", 2.4027], [\"14400\", 1.2586], [\"14500\", 1.6018], [\"14600\", 2.1167], [\"14700\", 1.7162], [\"14800\", 0.8581], [\"14900\", 1.2014], [\"15000\", 0.8581], [\"15100\", 0.0572], [\"15200\", 0.2288], [\"15400\", 0.1716], [\"15500\", 0.1144]]}",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Definition for singly-linked list.\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\n// Min-heap structure\ntypedef struct {\n    struct ListNode** arr;\n    int size;\n    int capacity;\n} MinHeap;\n\nMinHeap* createHeap(int capacity) {\n    MinHeap* heap = malloc(sizeof(MinHeap));\n    heap->arr = malloc(sizeof(struct ListNode*) * capacity);\n    heap->size = 0;\n    heap->capacity = capacity;\n    return heap;\n}\n\nvoid swap(struct ListNode** a, struct ListNode** b) {\n    struct ListNode* temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nvoid heapifyUp(MinHeap* heap, int idx) {\n    int parent = (idx - 1) / 2;\n    if (idx && heap->arr[idx]->val < heap->arr[parent]->val) {\n        swap(&heap->arr[idx], &heap->arr[parent]);\n        heapifyUp(heap, parent);\n    }\n}\n\nvoid heapifyDown(MinHeap* heap, int idx) {\n    int left = 2 * idx + 1;\n    int right = 2 * idx + 2;\n    int smallest = idx;\n\n    if (left < heap->size && heap->arr[left]->val < heap->arr[smallest]->val)\n        smallest = left;\n    if (right < heap->size && heap->arr[right]->val < heap->arr[smallest]->val)\n        smallest = right;\n\n    if (smallest != idx) {\n        swap(&heap->arr[idx], &heap->arr[smallest]);\n        heapifyDown(heap, smallest);\n    }\n}\n\nvoid push(MinHeap* heap, struct ListNode* node) {\n    heap->arr[heap->size++] = node;\n    heapifyUp(heap, heap->size - 1);\n}\n\nstruct ListNode* pop(MinHeap* heap) {\n    if (heap->size == 0) return NULL;\n    struct ListNode* top = heap->arr[0];\n    heap->arr[0] = heap->arr[--heap->size];\n    heapifyDown(heap, 0);\n    return top;\n}\n\nvoid freeHeap(MinHeap* heap) {\n    free(heap->arr);\n    free(heap);\n}\n\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {\n    if (listsSize == 0) return NULL;\n\n    MinHeap* heap = createHeap(listsSize);\n\n    // Push the head of each non-empty list into the heap\n    for (int i = 0; i < listsSize; ++i) {\n        if (lists[i]) {\n            push(heap, lists[i]);\n        }\n    }\n\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    dummy.next = NULL;\n\n    while (heap->size > 0) {\n        struct ListNode* minNode = pop(heap);\n        tail->next = minNode;\n        tail = tail->next;\n        if (minNode->next) {\n            push(heap, minNode->next);\n        }\n    }\n\n    freeHeap(heap);\n    return dummy.next;\n}\n",
            "timestamp": 1749304808,
            "statusCode": 20,
            "user": {
                "username": "IvanAssis",
                "profile": {
                    "realName": "IvanAssis",
                    "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
                }
            },
            "lang": {
                "name": "c",
                "verboseName": "C"
            },
            "question": {
                "questionId": "23",
                "titleSlug": "merge-k-sorted-lists",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": "Line 5: Char 8: error: redefinition of \u2018struct ListNode\u2019 [solution.c]\n    5 | struct ListNode {\n      |        ^~~~~~~~",
            "lastTestcase": null,
            "codeOutput": "{\"compile_error\": \"Line 5: Char 8: error: redefinition of \\u2018struct ListNode\\u2019 [solution.c]\\n    5 | struct ListNode {\\n      |        ^~~~~~~~\"}",
            "expectedOutput": null,
            "totalCorrect": null,
            "totalTestcases": 0,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": null
        }
    }
}