{
    "data": {
        "submissionDetails": {
            "runtime": 0,
            "runtimeDisplay": "0 ms",
            "runtimePercentile": 100.0,
            "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"1\", 64.6163], [\"5\", 4.628], [\"8\", 0.5859000000000001], [\"12\", 0.293], [\"15\", 0.1758], [\"19\", 0.3515], [\"22\", 0.2344], [\"26\", 0.0586], [\"29\", 0.0586], [\"33\", 0.0586], [\"37\", 0.0586], [\"40\", 0.1172], [\"44\", 0.0586], [\"47\", 0.0586], [\"51\", 0.0586], [\"54\", 0.0586], [\"58\", 0.0586], [\"61\", 0.0586], [\"65\", 0.0586], [\"68\", 0.0586], [\"72\", 0.1172], [\"75\", 0.0586], [\"79\", 0.0586], [\"82\", 0.1172], [\"86\", 0.0586], [\"89\", 0.0586], [\"93\", 0.0586], [\"96\", 0.0586], [\"100\", 0.0586], [\"103\", 0.0586], [\"107\", 0.1757], [\"111\", 0.1757], [\"114\", 0.0586], [\"118\", 0.1172], [\"121\", 0.1172], [\"125\", 0.0586], [\"128\", 0.1172], [\"132\", 0.4687], [\"135\", 0.1172], [\"139\", 0.1172], [\"142\", 0.1757], [\"146\", 0.8787], [\"149\", 0.1757], [\"153\", 0.1172], [\"156\", 0.9373], [\"160\", 0.1757], [\"163\", 0.0586], [\"167\", 0.4687], [\"170\", 1.1716], [\"174\", 0.7616], [\"178\", 1.8745999999999998], [\"181\", 2.2847], [\"185\", 1.2303000000000002], [\"188\", 1.6402999999999999], [\"192\", 0.703], [\"195\", 0.8787], [\"199\", 0.2929], [\"202\", 0.4101], [\"206\", 0.1172], [\"209\", 0.0586], [\"213\", 0.2344], [\"216\", 0.1758], [\"220\", 0.4101], [\"223\", 0.1172], [\"227\", 0.35150000000000003], [\"230\", 0.1758], [\"234\", 0.3515], [\"237\", 0.1758], [\"241\", 0.6444000000000001], [\"244\", 0.1172], [\"248\", 0.4687], [\"252\", 0.1758], [\"255\", 0.5858], [\"259\", 0.703], [\"262\", 0.2344], [\"266\", 0.35150000000000003], [\"269\", 0.7030000000000001], [\"273\", 0.1758], [\"276\", 0.2343], [\"280\", 0.1758]]}",
            "memory": 13988000,
            "memoryDisplay": "14 MB",
            "memoryPercentile": 46.80730000000001,
            "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"13700\", 4.3937], [\"13800\", 24.0187], [\"13900\", 24.7803], [\"14000\", 14.5284], [\"14100\", 9.7247], [\"14200\", 5.0381], [\"14300\", 2.3433], [\"14400\", 1.2888], [\"14500\", 1.5231], [\"14600\", 1.9332], [\"14700\", 1.6989], [\"14800\", 0.703], [\"14900\", 1.1716], [\"15000\", 0.8787], [\"15100\", 0.0586], [\"15200\", 0.2343], [\"15400\", 0.1757], [\"15500\", 0.1172], [\"15600\", 0.2343], [\"15700\", 0.1172]]}",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Min-heap structure\ntypedef struct {\n    struct ListNode** arr;\n    int size;\n    int capacity;\n} MinHeap;\n\nMinHeap* createHeap(int capacity) {\n    MinHeap* heap = malloc(sizeof(MinHeap));\n    heap->arr = malloc(sizeof(struct ListNode*) * capacity);\n    heap->size = 0;\n    heap->capacity = capacity;\n    return heap;\n}\n\nvoid swap(struct ListNode** a, struct ListNode** b) {\n    struct ListNode* temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nvoid heapifyUp(MinHeap* heap, int idx) {\n    int parent = (idx - 1) / 2;\n    if (idx && heap->arr[idx]->val < heap->arr[parent]->val) {\n        swap(&heap->arr[idx], &heap->arr[parent]);\n        heapifyUp(heap, parent);\n    }\n}\n\nvoid heapifyDown(MinHeap* heap, int idx) {\n    int left = 2 * idx + 1;\n    int right = 2 * idx + 2;\n    int smallest = idx;\n\n    if (left < heap->size && heap->arr[left]->val < heap->arr[smallest]->val)\n        smallest = left;\n    if (right < heap->size && heap->arr[right]->val < heap->arr[smallest]->val)\n        smallest = right;\n\n    if (smallest != idx) {\n        swap(&heap->arr[idx], &heap->arr[smallest]);\n        heapifyDown(heap, smallest);\n    }\n}\n\nvoid push(MinHeap* heap, struct ListNode* node) {\n    heap->arr[heap->size++] = node;\n    heapifyUp(heap, heap->size - 1);\n}\n\nstruct ListNode* pop(MinHeap* heap) {\n    if (heap->size == 0) return NULL;\n    struct ListNode* top = heap->arr[0];\n    heap->arr[0] = heap->arr[--heap->size];\n    heapifyDown(heap, 0);\n    return top;\n}\n\nvoid freeHeap(MinHeap* heap) {\n    free(heap->arr);\n    free(heap);\n}\n\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {\n    if (listsSize == 0) return NULL;\n\n    MinHeap* heap = createHeap(listsSize);\n\n    // Push the head of each non-empty list into the heap\n    for (int i = 0; i < listsSize; ++i) {\n        if (lists[i]) {\n            push(heap, lists[i]);\n        }\n    }\n\n    struct ListNode dummy;\n    struct ListNode* tail = &dummy;\n    dummy.next = NULL;\n\n    while (heap->size > 0) {\n        struct ListNode* minNode = pop(heap);\n        tail->next = minNode;\n        tail = tail->next;\n        if (minNode->next) {\n            push(heap, minNode->next);\n        }\n    }\n\n    freeHeap(heap);\n    return dummy.next;\n}\n",
            "timestamp": 1749426353,
            "statusCode": 10,
            "user": {
                "username": "IvanAssis",
                "profile": {
                    "realName": "IvanAssis",
                    "userAvatar": "https://assets.leetcode.com/users/default_avatar.jpg"
                }
            },
            "lang": {
                "name": "c",
                "verboseName": "C"
            },
            "question": {
                "questionId": "23",
                "titleSlug": "merge-k-sorted-lists",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 134,
            "totalTestcases": 134,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}