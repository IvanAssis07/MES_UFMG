{
  "data": {
    "submissionDetails": {
      "runtime": 20,
      "runtimeDisplay": "20 ms",
      "runtimePercentile": 62.237399999999994,
      "runtimeDistribution": "{\"lang\": \"python\", \"distribution\": [[\"1\", 0.6581], [\"3\", 0.8858999999999999], [\"6\", 2.3285], [\"8\", 1.5186], [\"10\", 5.9732], [\"13\", 6.8843], [\"15\", 9.1116], [\"18\", 15.7934], [\"20\", 11.0099], [\"23\", 23.107999999999997], [\"25\", 9.5672], [\"28\", 2.7082], [\"30\", 1.0630000000000002], [\"32\", 0.8859], [\"35\", 0.37960000000000005], [\"37\", 0.2784], [\"40\", 0.2277], [\"42\", 0.20249999999999999], [\"45\", 0.15189999999999998], [\"47\", 0.1012], [\"49\", 0.2024], [\"52\", 0.0506], [\"54\", 0.17709999999999998], [\"57\", 0.1012], [\"59\", 0.1265], [\"62\", 0.1012], [\"64\", 0.1012], [\"67\", 0.253], [\"69\", 0.0506], [\"71\", 0.0759], [\"74\", 0.1518], [\"76\", 0.0253], [\"79\", 0.0253], [\"81\", 0.0253], [\"84\", 0.1012], [\"86\", 0.0506], [\"88\", 0.0253], [\"91\", 0.0253], [\"93\", 0.0253], [\"96\", 0.0253], [\"98\", 0.0253], [\"101\", 0.0253], [\"103\", 0.0253], [\"106\", 0.0253], [\"108\", 0.0253], [\"110\", 0.0253], [\"113\", 0.0253], [\"115\", 0.0253], [\"118\", 0.0506], [\"120\", 0.0253], [\"123\", 0.0253], [\"125\", 0.0506], [\"127\", 0.0253], [\"130\", 0.0253], [\"132\", 0.0253]]}",
      "memory": 14660000,
      "memoryDisplay": "14.7 MB",
      "memoryPercentile": 74.05719999999998,
      "memoryDistribution": "{\"lang\": \"python\", \"distribution\": [[\"13800\", 0.6328], [\"13900\", 2.202], [\"14000\", 2.3538], [\"14100\", 1.7211], [\"14200\", 0.3543], [\"14300\", 0.0506], [\"14400\", 0.1519], [\"14500\", 1.1136], [\"14600\", 17.3627], [\"14700\", 23.9686], [\"14800\", 35.6619]]}",
      "code": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        if not ratings:\n            return 0\n        \n        n = len(ratings)\n        # Initialize each child with 1 candy\n        candies = [1] * n\n        \n        # Left to right pass: ensure higher rated children get more than left neighbor\n        for i in range(1, n):\n            if ratings[i] > ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n        \n        # Right to left pass: ensure higher rated children get more than right neighbor\n        for i in range(n-2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        \n        return sum(candies)\n",
      "timestamp": 1749412798,
      "statusCode": 10,
      "user": {
        "username": "yosQbj5lkC",
        "profile": {
          "realName": "Henrique Freitas",
          "userAvatar": "https://assets.leetcode.com/users/yosQbj5lkC/avatar_1748722942.png"
        }
      },
      "lang": { "name": "python", "verboseName": "Python" },
      "question": {
        "questionId": "135",
        "titleSlug": "candy",
        "hasFrontendPreview": false
      },
      "notes": "",
      "flagType": "WHITE",
      "topicTags": [],
      "runtimeError": null,
      "compileError": null,
      "lastTestcase": "",
      "codeOutput": "",
      "expectedOutput": "",
      "totalCorrect": 49,
      "totalTestcases": 49,
      "fullCodeOutput": null,
      "testDescriptions": null,
      "testBodies": null,
      "testInfo": null,
      "stdOutput": ""
    }
  }
}
