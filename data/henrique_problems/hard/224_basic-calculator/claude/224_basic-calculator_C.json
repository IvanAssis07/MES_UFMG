{
  "data": {
    "submissionDetails": {
      "runtime": 0,
      "runtimeDisplay": "0 ms",
      "runtimePercentile": 100.0,
      "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"0\", 47.0899], [\"1\", 10.8466], [\"2\", 7.672], [\"3\", 18.5185], [\"4\", 9.2593], [\"5\", 0.7937], [\"6\", 0.2646], [\"7\", 0.2646]]}",
      "memory": 9172000,
      "memoryDisplay": "9.2 MB",
      "memoryPercentile": 76.19040000000001,
      "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"8700\", 0.2646], [\"8800\", 2.6455], [\"8900\", 6.3492], [\"9000\", 2.9101], [\"9100\", 11.6402], [\"9200\", 19.0476], [\"9300\", 26.9841], [\"9400\", 10.0529], [\"9500\", 3.4392], [\"9600\", 1.5873], [\"9700\", 0.7937], [\"9800\", 1.5873], [\"9900\", 0.5291], [\"10000\", 2.381], [\"10100\", 4.4974], [\"10200\", 0.2646]]}",
      "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint calculate(char* s) {\n    int len = strlen(s);\n    int* stack = (int*)malloc(len * sizeof(int));\n    int top = -1;\n    \n    int result = 0;\n    int number = 0;\n    int sign = 1;  // 1 for +, -1 for -\n    \n    for (int i = 0; i < len; i++) {\n        char c = s[i];\n        \n        if (c >= '0' && c <= '9') {\n            // Build the number digit by digit\n            number = number * 10 + (c - '0');\n        }\n        else if (c == '+') {\n            // Add current number to result and reset\n            result += sign * number;\n            number = 0;\n            sign = 1;\n        }\n        else if (c == '-') {\n            // Add current number to result and set sign to negative\n            result += sign * number;\n            number = 0;\n            sign = -1;\n        }\n        else if (c == '(') {\n            // Push current result and sign to stack\n            stack[++top] = result;\n            stack[++top] = sign;\n            \n            // Reset for new sub-expression\n            result = 0;\n            sign = 1;\n        }\n        else if (c == ')') {\n            // Add current number to result\n            result += sign * number;\n            number = 0;\n            \n            // Pop sign and previous result from stack\n            int prev_sign = stack[top--];\n            int prev_result = stack[top--];\n            \n            // Combine with previous context\n            result = prev_result + prev_sign * result;\n        }\n        // Ignore spaces\n    }\n    \n    // Add the last number\n    result += sign * number;\n    \n    free(stack);\n    return result;\n}",
      "timestamp": 1749420663,
      "statusCode": 10,
      "user": {
        "username": "yosQbj5lkC",
        "profile": {
          "realName": "Henrique Freitas",
          "userAvatar": "https://assets.leetcode.com/users/yosQbj5lkC/avatar_1748722942.png"
        }
      },
      "lang": { "name": "c", "verboseName": "C" },
      "question": {
        "questionId": "224",
        "titleSlug": "basic-calculator",
        "hasFrontendPreview": false
      },
      "notes": "",
      "flagType": "WHITE",
      "topicTags": [],
      "runtimeError": null,
      "compileError": null,
      "lastTestcase": "",
      "codeOutput": "",
      "expectedOutput": "",
      "totalCorrect": 47,
      "totalTestcases": 47,
      "fullCodeOutput": null,
      "testDescriptions": null,
      "testBodies": null,
      "testInfo": null,
      "stdOutput": ""
    }
  }
}
