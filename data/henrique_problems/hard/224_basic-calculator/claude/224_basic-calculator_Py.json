{
  "data": {
    "submissionDetails": {
      "runtime": 55,
      "runtimeDisplay": "55 ms",
      "runtimePercentile": 76.13510000000005,
      "runtimeDistribution": "{\"lang\": \"python\", \"distribution\": [[\"1\", 0.2112], [\"3\", 0.3168], [\"6\", 0.1056], [\"9\", 0.1056], [\"11\", 0.1056], [\"14\", 0.1056], [\"17\", 0.4224], [\"19\", 0.1056], [\"22\", 0.1056], [\"25\", 0.1056], [\"27\", 2.5343], [\"30\", 0.6336], [\"32\", 1.056], [\"35\", 2.0063], [\"38\", 7.603], [\"40\", 2.5343], [\"43\", 2.7455], [\"46\", 3.0623], [\"48\", 8.1309], [\"51\", 2.8511], [\"54\", 1.7951], [\"56\", 6.758100000000001], [\"59\", 2.3232], [\"61\", 3.9071], [\"64\", 1.4784000000000002], [\"67\", 1.9008], [\"69\", 2.9567], [\"72\", 1.056], [\"75\", 2.2175], [\"77\", 4.5407], [\"80\", 1.4784], [\"83\", 3.9071000000000002], [\"85\", 2.7455], [\"88\", 1.2671999999999999], [\"90\", 1.584], [\"93\", 0.7392000000000001], [\"96\", 1.3727999999999998], [\"98\", 1.9008], [\"101\", 0.528], [\"104\", 0.7392000000000001], [\"106\", 1.1616], [\"109\", 0.1056], [\"112\", 0.7392], [\"114\", 0.1056], [\"117\", 1.1616], [\"120\", 0.31679999999999997], [\"122\", 0.1056], [\"125\", 0.3168], [\"127\", 0.2112], [\"130\", 0.8448], [\"133\", 0.7392], [\"135\", 1.4784000000000002], [\"138\", 0.9504], [\"141\", 0.9504], [\"143\", 0.528], [\"146\", 0.7392000000000001], [\"149\", 0.4224], [\"151\", 0.9504], [\"154\", 0.1056], [\"156\", 0.2112], [\"159\", 0.4224], [\"162\", 0.1056], [\"164\", 0.1056], [\"167\", 0.1056], [\"170\", 0.1056], [\"172\", 0.31679999999999997], [\"175\", 0.2112], [\"178\", 0.2112], [\"180\", 0.1056], [\"183\", 0.2112], [\"185\", 0.2112], [\"188\", 0.1056], [\"191\", 0.1056], [\"193\", 0.1056], [\"196\", 0.1056], [\"199\", 0.2112]]}",
      "memory": 13284000,
      "memoryDisplay": "13.3 MB",
      "memoryPercentile": 46.568100000000015,
      "memoryDistribution": "{\"lang\": \"python\", \"distribution\": [[\"12800\", 0.1056], [\"13000\", 5.5966], [\"13100\", 21.4361], [\"13200\", 26.2936], [\"13300\", 11.1932], [\"13400\", 2.3231], [\"13500\", 1.3728], [\"13600\", 1.056], [\"13700\", 1.1616], [\"13800\", 1.056], [\"13900\", 1.1616], [\"14000\", 2.4287], [\"14100\", 1.6895], [\"14200\", 1.4784], [\"14300\", 0.7392], [\"14400\", 0.2112], [\"14500\", 0.1056], [\"14600\", 0.4224], [\"14700\", 0.1056], [\"14800\", 0.2112], [\"14900\", 0.2112], [\"15100\", 0.6336], [\"15200\", 0.1056], [\"15300\", 0.6336], [\"15400\", 0.3168], [\"15600\", 0.3168], [\"15800\", 0.1056], [\"15900\", 0.1056], [\"16100\", 0.1056], [\"16300\", 0.1056], [\"16700\", 0.1056], [\"16800\", 0.1056], [\"16900\", 0.1056], [\"17000\", 0.2112], [\"17100\", 0.1056], [\"17200\", 0.1056], [\"17400\", 0.1056], [\"17800\", 0.1056], [\"18500\", 0.1056], [\"19400\", 0.1056], [\"19500\", 1.7951], [\"19600\", 1.4784], [\"19700\", 2.6399], [\"19800\", 0.8448], [\"19900\", 0.1056], [\"20000\", 0.3168], [\"20100\", 0.1056], [\"20200\", 0.2112], [\"20400\", 0.2112], [\"20500\", 0.528], [\"20600\", 0.2112], [\"20700\", 0.1056], [\"20800\", 0.3168], [\"20900\", 0.2112], [\"21100\", 0.1056], [\"21200\", 0.1056], [\"21400\", 0.3168], [\"22100\", 0.1056], [\"22500\", 0.1056], [\"24400\", 0.1056], [\"26000\", 0.1056], [\"26400\", 0.1056], [\"32500\", 0.2112], [\"66100\", 0.1056], [\"66200\", 0.1056], [\"66300\", 0.1056], [\"94800\", 0.1056], [\"126800\", 0.1056]]}",
      "code": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        stack = []\n        result = 0\n        number = 0\n        sign = 1  # 1 for +, -1 for -\n        \n        for c in s:\n            if c.isdigit():\n                number = number * 10 + int(c)\n            elif c == '+':\n                result += sign * number\n                number = 0\n                sign = 1\n            elif c == '-':\n                result += sign * number\n                number = 0\n                sign = -1\n            elif c == '(':\n                # Push current result and sign to stack\n                stack.append(result)\n                stack.append(sign)\n                # Reset for new sub-expression\n                result = 0\n                sign = 1\n            elif c == ')':\n                # Add current number to result\n                result += sign * number\n                number = 0\n                # Pop sign and previous result from stack\n                result = stack.pop() * result + stack.pop()\n        \n        # Add the last number\n        return result + sign * number",
      "timestamp": 1749420758,
      "statusCode": 10,
      "user": {
        "username": "yosQbj5lkC",
        "profile": {
          "realName": "Henrique Freitas",
          "userAvatar": "https://assets.leetcode.com/users/yosQbj5lkC/avatar_1748722942.png"
        }
      },
      "lang": { "name": "python", "verboseName": "Python" },
      "question": {
        "questionId": "224",
        "titleSlug": "basic-calculator",
        "hasFrontendPreview": false
      },
      "notes": "",
      "flagType": "WHITE",
      "topicTags": [],
      "runtimeError": null,
      "compileError": null,
      "lastTestcase": "",
      "codeOutput": "",
      "expectedOutput": "",
      "totalCorrect": 47,
      "totalTestcases": 47,
      "fullCodeOutput": null,
      "testDescriptions": null,
      "testBodies": null,
      "testInfo": null,
      "stdOutput": ""
    }
  }
}
