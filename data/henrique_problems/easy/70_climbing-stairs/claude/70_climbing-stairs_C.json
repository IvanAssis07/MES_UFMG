{
  "data": {
    "submissionDetails": {
      "runtime": 0,
      "runtimeDisplay": "0 ms",
      "runtimePercentile": 100.0,
      "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"0\", 98.503], [\"1\", 0.1996], [\"2\", 0.4741], [\"3\", 0.1248], [\"4\", 0.025]]}",
      "memory": 7628000,
      "memoryDisplay": "7.6 MB",
      "memoryPercentile": 95.8832,
      "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"7500\", 0.0499], [\"7600\", 4.0669], [\"7700\", 32.8343], [\"7800\", 37.1257], [\"7900\", 11.0529], [\"8000\", 9.2066]]}",
      "code": "#include <stdio.h>\n\n// Solu\u00e7\u00e3o principal - Programa\u00e7\u00e3o Din\u00e2mica (Bottom-up)\nint climbStairs(int n) {\n    if (n <= 2) {\n        return n;\n    }\n    \n    // Para chegar ao degrau n, podemos vir do degrau (n-1) ou (n-2)\n    // Ent\u00e3o: ways[n] = ways[n-1] + ways[n-2]\n    // Isso \u00e9 equivalente \u00e0 sequ\u00eancia de Fibonacci!\n    \n    int prev2 = 1; // ways[1] = 1\n    int prev1 = 2; // ways[2] = 2\n    int current;\n    \n    for (int i = 3; i <= n; i++) {\n        current = prev1 + prev2;\n        prev2 = prev1;\n        prev1 = current;\n    }\n    \n    return current;\n}\n\n// Solu\u00e7\u00e3o alternativa - Recurs\u00e3o com memoiza\u00e7\u00e3o\nint climbStairsHelper(int n, int* memo) {\n    if (n <= 2) {\n        return n;\n    }\n    \n    if (memo[n] != -1) {\n        return memo[n];\n    }\n    \n    memo[n] = climbStairsHelper(n - 1, memo) + climbStairsHelper(n - 2, memo);\n    return memo[n];\n}\n\nint climbStairs_memoization(int n) {\n    int* memo = (int*)malloc((n + 1) * sizeof(int));\n    \n    // Inicializa array de memoiza\u00e7\u00e3o com -1\n    for (int i = 0; i <= n; i++) {\n        memo[i] = -1;\n    }\n    \n    int result = climbStairsHelper(n, memo);\n    free(memo);\n    return result;\n}\n\n// Solu\u00e7\u00e3o usando array de DP (mais clara para entender)\nint climbStairs_array(int n) {\n    if (n <= 2) {\n        return n;\n    }\n    \n    int* dp = (int*)malloc((n + 1) * sizeof(int));\n    dp[1] = 1;\n    dp[2] = 2;\n    \n    for (int i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    \n    int result = dp[n];\n    free(dp);\n    return result;\n}\n",
      "timestamp": 1748825407,
      "statusCode": 10,
      "user": {
        "username": "yosQbj5lkC",
        "profile": {
          "realName": "Henrique Freitas",
          "userAvatar": "https://assets.leetcode.com/users/yosQbj5lkC/avatar_1748722942.png"
        }
      },
      "lang": { "name": "c", "verboseName": "C" },
      "question": {
        "questionId": "70",
        "titleSlug": "climbing-stairs",
        "hasFrontendPreview": false
      },
      "notes": "",
      "flagType": "WHITE",
      "topicTags": [],
      "runtimeError": null,
      "compileError": null,
      "lastTestcase": "",
      "codeOutput": "",
      "expectedOutput": "",
      "totalCorrect": 45,
      "totalTestcases": 45,
      "fullCodeOutput": null,
      "testDescriptions": null,
      "testBodies": null,
      "testInfo": null,
      "stdOutput": ""
    }
  }
}
