{
  "data": {
    "submissionDetails": {
      "runtime": 2895,
      "runtimeDisplay": "N/A",
      "runtimePercentile": null,
      "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"5\", 14.8936], [\"17\", 6.808499999999999], [\"29\", 4.6808000000000005], [\"41\", 11.489300000000002], [\"53\", 13.1915], [\"64\", 16.1702], [\"76\", 6.808599999999999], [\"88\", 3.8296], [\"100\", 4.2553], [\"111\", 3.4042999999999997], [\"123\", 0.851], [\"135\", 1.702], [\"147\", 0.851], [\"159\", 0.851], [\"170\", 0.4255], [\"182\", 0.4255], [\"194\", 0.4255], [\"206\", 0.4255], [\"218\", 0.4255], [\"229\", 0.4255], [\"241\", 0.4255], [\"253\", 0.4255], [\"265\", 0.4255], [\"277\", 0.4255], [\"288\", 0.4255], [\"300\", 0.4255]]}",
      "memory": 10304000,
      "memoryDisplay": "N/A",
      "memoryPercentile": null,
      "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"15145\", 10.2128], [\"15836\", 0.8511], [\"16528\", 1.2766], [\"17219\", 2.5530999999999997], [\"17910\", 0.4255], [\"18601\", 1.2766], [\"19293\", 4.2553], [\"19984\", 6.383], [\"20675\", 2.5531], [\"21366\", 2.5532], [\"22058\", 0.4255], [\"22749\", 0.4255], [\"23440\", 2.1276], [\"24131\", 1.2766], [\"24823\", 1.2766], [\"25514\", 2.1276], [\"26205\", 3.4043], [\"26896\", 1.2766], [\"27588\", 4.6808], [\"28279\", 2.1276], [\"28970\", 2.1277], [\"29661\", 4.6809], [\"30353\", 5.9575], [\"31044\", 2.1276], [\"31735\", 5.5319], [\"32426\", 2.1277], [\"33118\", 1.702], [\"33809\", 0.4255], [\"34500\", 1.2765], [\"35191\", 0.851], [\"35883\", 0.4255], [\"36574\", 0.4255], [\"37265\", 0.4255], [\"37956\", 0.851], [\"38648\", 0.4255], [\"39339\", 0.4255], [\"40030\", 0.4255], [\"40721\", 0.4255], [\"41413\", 0.4255], [\"42104\", 0.4255], [\"42795\", 0.4255], [\"43486\", 0.4255], [\"44178\", 0.4255], [\"44869\", 0.4255], [\"45560\", 0.4255], [\"46251\", 0.4255], [\"46943\", 0.4255], [\"47634\", 0.4255], [\"48325\", 1.7021], [\"49016\", 0.4255], [\"49708\", 0.4255], [\"50399\", 0.4255], [\"51090\", 0.8511], [\"51781\", 0.4255], [\"52473\", 0.4255], [\"53164\", 0.8511], [\"53855\", 1.2766], [\"54546\", 0.4255], [\"55238\", 0.4255], [\"55929\", 0.4255], [\"56620\", 0.4255]]}",
      "code": "#include <stdbool.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int value;\n    int index;\n} Entry;\n\nbool containsNearbyDuplicate(int* nums, int numsSize, int k) {\n    if (numsSize <= 1 || k == 0) {\n        return false;\n    }\n\n    // Create a hash table\n    int tableSize = numsSize;\n    Entry* table = (Entry*)calloc(tableSize, sizeof(Entry));\n    if (table == NULL) {\n        return false;\n    }\n\n    for (int i = 0; i < numsSize; i++) {\n        int hash = abs(nums[i]) % tableSize;\n        while (table[hash].value != 0 || table[hash].index != 0) {\n            if (table[hash].value == nums[i]) {\n                if (i - table[hash].index <= k) {\n                    free(table);\n                    return true;\n                } else {\n                    table[hash].index = i;\n                    break;\n                }\n            }\n            hash = (hash + 1) % tableSize;\n        }\n        if (table[hash].value == 0 && table[hash].index == 0) {\n            table[hash].value = nums[i];\n            table[hash].index = i;\n        }\n    }\n\n    free(table);\n    return false;\n}",
      "timestamp": 1748911411,
      "statusCode": 11,
      "user": {
        "username": "yosQbj5lkC",
        "profile": {
          "realName": "Henrique Freitas",
          "userAvatar": "https://assets.leetcode.com/users/yosQbj5lkC/avatar_1748722942.png"
        }
      },
      "lang": { "name": "c", "verboseName": "C" },
      "question": {
        "questionId": "219",
        "titleSlug": "contains-duplicate-ii",
        "hasFrontendPreview": false
      },
      "notes": "",
      "flagType": "WHITE",
      "topicTags": [],
      "runtimeError": null,
      "compileError": null,
      "lastTestcase": "[0,1,2,3,4,5,0]\n6",
      "codeOutput": "false",
      "expectedOutput": "true",
      "totalCorrect": 23,
      "totalTestcases": 63,
      "fullCodeOutput": null,
      "testDescriptions": null,
      "testBodies": null,
      "testInfo": null,
      "stdOutput": ""
    }
  }
}
