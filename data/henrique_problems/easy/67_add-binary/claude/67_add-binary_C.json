{
  "data": {
    "submissionDetails": {
      "runtime": 0,
      "runtimeDisplay": "N/A",
      "runtimePercentile": null,
      "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"0\", 87.7397], [\"1\", 1.7123], [\"2\", 2.4658], [\"3\", 3.1507], [\"4\", 0.3425]]}",
      "memory": 8132000,
      "memoryDisplay": "N/A",
      "memoryPercentile": null,
      "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"7900\", 2.7397], [\"8000\", 29.6575], [\"8100\", 37.5342], [\"8200\", 16.7808], [\"8300\", 7.1918], [\"8400\", 1.0274], [\"8500\", 0.0685]]}",
      "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar* addBinary(char* a, char* b) {\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLen = (lenA > lenB) ? lenA : lenB;\n    \n    // Aloca espa\u00e7o para o resultado (pode precisar de 1 d\u00edgito extra para carry)\n    char* result = (char*)malloc((maxLen + 2) * sizeof(char));\n    result[maxLen + 1] = '\\0'; // Termina a string\n    \n    int carry = 0;\n    int i = lenA - 1; // \u00cdndice para string a (da direita para esquerda)\n    int j = lenB - 1; // \u00cdndice para string b (da direita para esquerda)\n    int k = maxLen;   // \u00cdndice para resultado (da direita para esquerda)\n    \n    // Processa os d\u00edgitos da direita para a esquerda\n    while (i >= 0 || j >= 0 || carry > 0) {\n        int bitA = (i >= 0) ? (a[i] - '0') : 0;\n        int bitB = (j >= 0) ? (b[j] - '0') : 0;\n        \n        int sum = bitA + bitB + carry;\n        result[k] = (sum % 2) + '0'; // D\u00edgito atual\n        carry = sum / 2;             // Carry para pr\u00f3xima posi\u00e7\u00e3o\n        \n        i--;\n        j--;\n        k--;\n    }\n    \n    // Se n\u00e3o houve carry final, move o resultado para remover zero \u00e0 esquerda\n    if (result[0] == '0' && strlen(result) > 1) {\n        char* finalResult = (char*)malloc((maxLen + 1) * sizeof(char));\n        strcpy(finalResult, result + 1);\n        free(result);\n        return finalResult;\n    }\n    \n    return result;\n}",
      "timestamp": 1748824547,
      "statusCode": 11,
      "user": {
        "username": "yosQbj5lkC",
        "profile": {
          "realName": "Henrique Freitas",
          "userAvatar": "https://assets.leetcode.com/users/yosQbj5lkC/avatar_1748722942.png"
        }
      },
      "lang": { "name": "c", "verboseName": "C" },
      "question": {
        "questionId": "67",
        "titleSlug": "add-binary",
        "hasFrontendPreview": false
      },
      "notes": "",
      "flagType": "WHITE",
      "topicTags": [],
      "runtimeError": null,
      "compileError": null,
      "lastTestcase": "\"0\"\n\"0\"",
      "codeOutput": "\"\ufffd0\"",
      "expectedOutput": "\"0\"",
      "totalCorrect": 97,
      "totalTestcases": 296,
      "fullCodeOutput": null,
      "testDescriptions": null,
      "testBodies": null,
      "testInfo": null,
      "stdOutput": ""
    }
  }
}
