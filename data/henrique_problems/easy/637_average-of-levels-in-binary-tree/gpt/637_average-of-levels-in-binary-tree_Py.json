{
  "data": {
    "submissionDetails": {
      "runtime": 7,
      "runtimeDisplay": "7 ms",
      "runtimePercentile": 33.761900000000004,
      "runtimeDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"0\", 10.8253], [\"1\", 3.537], [\"2\", 6.4309], [\"3\", 16.6131], [\"4\", 18.2208], [\"5\", 5.895], [\"6\", 4.716], [\"7\", 13.8264], [\"8\", 6.4309], [\"9\", 2.358], [\"10\", 1.6077], [\"11\", 3.537], [\"12\", 0.8574]]}",
      "memory": 17152000,
      "memoryDisplay": "17.2 MB",
      "memoryPercentile": 48.66030000000001,
      "memoryDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"16800\", 0.8574], [\"16900\", 2.0364], [\"17000\", 19.9357], [\"17100\", 28.5102], [\"17200\", 32.2615], [\"17300\", 5.1447], [\"17400\", 0.9646], [\"17500\", 0.3215], [\"17600\", 2.6795], [\"17700\", 1.179]]}",
      "code": "from collections import deque\n\n\n\n# Solu\u00e7\u00e3o\nclass Solution(object):\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"\n        if not root:\n            return []\n\n        result = []\n        queue = deque([root])\n\n        while queue:\n            level_sum = 0\n            level_count = len(queue)\n\n            for _ in range(level_count):\n                node = queue.popleft()\n                level_sum += node.val\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n\n            result.append(float(level_sum) / level_count)\n\n        return result\n",
      "timestamp": 1748911816,
      "statusCode": 10,
      "user": {
        "username": "yosQbj5lkC",
        "profile": {
          "realName": "Henrique Freitas",
          "userAvatar": "https://assets.leetcode.com/users/yosQbj5lkC/avatar_1748722942.png"
        }
      },
      "lang": { "name": "python3", "verboseName": "Python" },
      "question": {
        "questionId": "637",
        "titleSlug": "average-of-levels-in-binary-tree",
        "hasFrontendPreview": false
      },
      "notes": "",
      "flagType": "WHITE",
      "topicTags": [],
      "runtimeError": null,
      "compileError": null,
      "lastTestcase": "",
      "codeOutput": "",
      "expectedOutput": "",
      "totalCorrect": 66,
      "totalTestcases": 66,
      "fullCodeOutput": null,
      "testDescriptions": null,
      "testBodies": null,
      "testInfo": null,
      "stdOutput": ""
    }
  }
}
