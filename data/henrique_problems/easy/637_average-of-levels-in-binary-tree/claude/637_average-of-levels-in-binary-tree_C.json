{"data":{"submissionDetails":{"runtime":0,"runtimeDisplay":"0 ms","runtimePercentile":100.0,"runtimeDistribution":"{\"lang\": \"c\", \"distribution\": [[\"0\", 61.3636], [\"1\", 1.1364], [\"2\", 7.9545], [\"3\", 7.9545], [\"4\", 5.6818], [\"6\", 2.2727], [\"7\", 4.5455], [\"8\", 2.2727]]}","memory":17280000,"memoryDisplay":"17.3 MB","memoryPercentile":26.136100000000017,"memoryDistribution":"{\"lang\": \"c\", \"distribution\": [[\"14400\", 1.1364], [\"14500\", 1.1364], [\"14600\", 5.6818], [\"14700\", 4.5455], [\"14800\", 2.2727], [\"14900\", 1.1364], [\"15100\", 5.6818], [\"15200\", 2.2727], [\"15400\", 2.2727], [\"15500\", 1.1364], [\"15600\", 2.2727], [\"15700\", 4.5455], [\"15800\", 13.6364], [\"15900\", 4.5455], [\"16000\", 3.4091], [\"16100\", 4.5455], [\"16300\", 1.1364], [\"16400\", 2.2727], [\"16500\", 2.2727], [\"16600\", 2.2727], [\"16700\", 1.1364], [\"16800\", 1.1364], [\"17200\", 3.4091], [\"17300\", 1.1364], [\"17400\", 2.2727], [\"17500\", 1.1364], [\"18400\", 1.1364], [\"18500\", 1.1364], [\"18800\", 2.2727], [\"19100\", 1.1364], [\"19200\", 1.1364], [\"20800\", 1.1364], [\"22700\", 1.1364], [\"24100\", 2.2727], [\"24200\", 1.1364], [\"24400\", 1.1364], [\"25500\", 2.2727]]}","code":"#include <stdio.h>\n#include <stdlib.h>\n\n\ndouble* averageOfLevels(struct TreeNode* root, int* returnSize) {\n    if (!root) {\n        *returnSize = 0;\n        return NULL;\n    }\n    \n    // Array para armazenar as m\u00e9dias de cada n\u00edvel\n    double* result = (double*)malloc(10000 * sizeof(double));\n    int levelCount = 0;\n    \n    // Queue para BFS - usando array circular\n    struct TreeNode** queue = (struct TreeNode**)malloc(10000 * sizeof(struct TreeNode*));\n    int front = 0, rear = 0;\n    \n    // Adiciona a raiz na queue\n    queue[rear++] = root;\n    \n    while (front < rear) {\n        int levelSize = rear - front;  // N\u00famero de n\u00f3s no n\u00edvel atual\n        long long sum = 0;  // Usar long long para evitar overflow\n        \n        // Processa todos os n\u00f3s do n\u00edvel atual\n        for (int i = 0; i < levelSize; i++) {\n            struct TreeNode* node = queue[front++];\n            sum += node->val;\n            \n            // Adiciona os filhos na queue para o pr\u00f3ximo n\u00edvel\n            if (node->left) {\n                queue[rear++] = node->left;\n            }\n            if (node->right) {\n                queue[rear++] = node->right;\n            }\n        }\n        \n        // Calcula a m\u00e9dia do n\u00edvel atual\n        result[levelCount++] = (double)sum / levelSize;\n    }\n    \n    *returnSize = levelCount;\n    free(queue);\n    \n    // Redimensiona o array result para o tamanho exato\n    result = (double*)realloc(result, levelCount * sizeof(double));\n    \n    return result;\n}\n\n// Fun\u00e7\u00e3o auxiliar para criar um novo n\u00f3\nstruct TreeNode* createNode(int val) {\n    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n    node->val = val;\n    node->left = NULL;\n    node->right = NULL;\n    return node;\n}\n","timestamp":1748911712,"statusCode":10,"user":{"username":"yosQbj5lkC","profile":{"realName":"Henrique Freitas","userAvatar":"https://assets.leetcode.com/users/yosQbj5lkC/avatar_1748722942.png"}},"lang":{"name":"c","verboseName":"C"},"question":{"questionId":"637","titleSlug":"average-of-levels-in-binary-tree","hasFrontendPreview":false},"notes":"","flagType":"WHITE","topicTags":[],"runtimeError":null,"compileError":null,"lastTestcase":"","codeOutput":"","expectedOutput":"","totalCorrect":66,"totalTestcases":66,"fullCodeOutput":null,"testDescriptions":null,"testBodies":null,"testInfo":null,"stdOutput":""}}}