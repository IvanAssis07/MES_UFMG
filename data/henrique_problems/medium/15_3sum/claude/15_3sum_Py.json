{
    "data": {
        "submissionDetails": {
            "runtime": 723,
            "runtimeDisplay": "723 ms",
            "runtimePercentile": 61.42970000000024,
            "runtimeDistribution": "{\"lang\": \"python\", \"distribution\": [[\"42\", 0.1789], [\"127\", 0.0081], [\"211\", 0.11359999999999998], [\"296\", 0.13799999999999996], [\"381\", 0.2516999999999999], [\"465\", 2.8548000000000013], [\"550\", 6.5707999999999975], [\"635\", 14.524000000000001], [\"719\", 35.42369999999998], [\"804\", 5.9528], [\"889\", 2.4319000000000015], [\"974\", 1.463999999999999], [\"1058\", 2.5866000000000025], [\"1143\", 1.1950999999999994], [\"1228\", 0.7473999999999997], [\"1312\", 0.5037999999999998], [\"1397\", 0.5441999999999998], [\"1482\", 0.4385999999999998], [\"1566\", 0.3493999999999999], [\"1651\", 0.4957999999999998], [\"1736\", 0.3081999999999999], [\"1821\", 0.6579999999999997], [\"1905\", 2.8464000000000014], [\"1990\", 0.7559999999999997], [\"2075\", 0.2598999999999999], [\"2159\", 0.32469999999999993], [\"2244\", 0.5035999999999998], [\"2329\", 0.4713999999999998], [\"2413\", 0.24329999999999993], [\"2498\", 0.17829999999999993], [\"2583\", 0.23509999999999992], [\"2668\", 0.39799999999999985], [\"2752\", 0.41419999999999985], [\"2837\", 0.2678999999999999], [\"2922\", 0.23539999999999994], [\"3006\", 0.13779999999999995], [\"3091\", 0.12159999999999996], [\"3176\", 0.16219999999999996], [\"3260\", 0.21079999999999993], [\"3345\", 0.21099999999999994], [\"3430\", 0.10539999999999997], [\"3515\", 0.18679999999999997], [\"3599\", 0.23539999999999997], [\"3684\", 0.08109999999999998], [\"3769\", 0.10549999999999997], [\"3853\", 0.06479999999999998], [\"3938\", 0.05679999999999999], [\"4023\", 0.08919999999999997], [\"4107\", 0.10539999999999997], [\"4192\", 0.08909999999999997], [\"4277\", 0.09739999999999997], [\"4362\", 0.06479999999999998], [\"4446\", 0.09719999999999997], [\"4531\", 0.07289999999999998], [\"4616\", 0.14589999999999995], [\"4700\", 0.27609999999999996], [\"4785\", 0.3327999999999999], [\"4870\", 0.23529999999999995], [\"4954\", 0.23509999999999992], [\"5039\", 0.21909999999999993], [\"5124\", 0.24319999999999992], [\"5209\", 0.20289999999999997], [\"5293\", 0.3492999999999999], [\"5378\", 0.4632999999999998], [\"5463\", 0.2593999999999999], [\"5547\", 0.12969999999999995], [\"5632\", 0.20279999999999995], [\"5717\", 0.27599999999999997], [\"5801\", 0.27619999999999995], [\"5886\", 0.17019999999999993], [\"5971\", 0.5036999999999998], [\"6056\", 0.4874999999999998], [\"6140\", 0.2517], [\"6225\", 0.2921999999999999], [\"6310\", 0.38989999999999986], [\"6394\", 0.4627999999999998], [\"6479\", 0.2919999999999999], [\"6564\", 0.38159999999999983], [\"6648\", 0.2839999999999999], [\"6733\", 0.46299999999999986]]}",
            "memory": 18392000,
            "memoryDisplay": "18.4 MB",
            "memoryPercentile": 63.560500000000005,
            "memoryDistribution": "{\"lang\": \"python\", \"distribution\": [[\"16800\", 0.0081], [\"17000\", 0.0081], [\"17200\", 0.0081], [\"17400\", 0.0244], [\"17500\", 0.0081], [\"17600\", 0.0081], [\"17700\", 0.1545], [\"17800\", 0.3822], [\"17900\", 0.74], [\"18000\", 1.2035], [\"18100\", 2.9845], [\"18200\", 8.5061], [\"18300\", 22.4038], [\"18400\", 22.6315], [\"18500\", 11.8403], [\"18600\", 1.4638], [\"18700\", 0.7888], [\"18800\", 0.9677], [\"18900\", 3.1227], [\"19000\", 3.9115], [\"19100\", 4.8223], [\"19200\", 1.293], [\"19300\", 0.3415], [\"19400\", 0.2114], [\"19500\", 0.2765], [\"19600\", 0.244], [\"19700\", 0.244], [\"19800\", 0.3009], [\"19900\", 0.4473], [\"20000\", 0.3985], [\"20100\", 0.2196], [\"20200\", 0.1789], [\"20300\", 0.6018], [\"20400\", 0.9515], [\"20500\", 1.2361], [\"20600\", 0.6099], [\"20700\", 0.6018], [\"20800\", 0.8295]]}",
            "code": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        # Edge case: less than 3 elements\n        if len(nums) < 3:\n            return []\n        \n        # Sort the array to enable two-pointer technique\n        nums.sort()\n        result = []\n        \n        # Fix the first element and use two pointers for the rest\n        for i in range(len(nums) - 2):\n            # Skip duplicates for the first element\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            \n            # Two pointers approach\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                current_sum = nums[i] + nums[left] + nums[right]\n                \n                if current_sum == 0:\n                    # Found a valid triplet\n                    result.append([nums[i], nums[left], nums[right]])\n                    \n                    # Skip duplicates for left pointer\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    \n                    # Skip duplicates for right pointer\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    \n                    # Move both pointers\n                    left += 1\n                    right -= 1\n                \n                elif current_sum < 0:\n                    # Sum is too small, move left pointer right\n                    left += 1\n                else:\n                    # Sum is too large, move right pointer left\n                    right -= 1\n        \n        return result",
            "timestamp": 1749258395,
            "statusCode": 10,
            "user": {
                "username": "yosQbj5lkC",
                "profile": {
                    "realName": "Henrique Freitas",
                    "userAvatar": "https://assets.leetcode.com/users/yosQbj5lkC/avatar_1748722942.png"
                }
            },
            "lang": {
                "name": "python",
                "verboseName": "Python"
            },
            "question": {
                "questionId": "15",
                "titleSlug": "3sum",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 314,
            "totalTestcases": 314,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}