{
  "data": {
    "submissionDetails": {
      "runtime": 34,
      "runtimeDisplay": "34 ms",
      "runtimePercentile": 93.63340000000001,
      "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"24\", 1.7301000000000002], [\"27\", 1.8683999999999998], [\"31\", 2.7680999999999996], [\"34\", 4.3598], [\"37\", 3.2526], [\"41\", 7.750900000000001], [\"44\", 17.5087], [\"47\", 12.5259], [\"51\", 13.633199999999999], [\"54\", 8.8582], [\"57\", 5.605700000000001], [\"60\", 1.384], [\"64\", 1.1072], [\"67\", 1.2456], [\"70\", 1.038], [\"74\", 0.8996], [\"77\", 0.41519999999999996], [\"80\", 0.346], [\"84\", 0.4152], [\"87\", 0.692], [\"90\", 0.1384], [\"93\", 0.48439999999999994], [\"97\", 0.5536], [\"100\", 0.48439999999999994], [\"103\", 0.4152], [\"107\", 0.5536], [\"110\", 0.5536], [\"113\", 0.0692], [\"117\", 0.0692], [\"120\", 0.2076], [\"123\", 0.1384], [\"126\", 0.2768], [\"130\", 0.1384], [\"133\", 0.0692], [\"136\", 0.0692], [\"140\", 0.1384], [\"143\", 0.1384], [\"146\", 0.2768], [\"150\", 0.0692], [\"153\", 0.1384], [\"156\", 0.1384], [\"159\", 0.0692], [\"163\", 0.0692], [\"166\", 0.0692], [\"169\", 0.0692], [\"173\", 0.0692], [\"176\", 0.0692], [\"179\", 0.0692], [\"183\", 0.0692], [\"186\", 0.0692], [\"189\", 0.0692], [\"192\", 0.0692], [\"196\", 0.0692], [\"199\", 0.0692], [\"202\", 0.0692], [\"206\", 0.1384], [\"209\", 0.0692], [\"212\", 0.0692], [\"216\", 0.0692], [\"219\", 0.0692], [\"222\", 0.0692], [\"225\", 0.0692], [\"229\", 0.1384], [\"232\", 0.0692], [\"235\", 0.0692], [\"239\", 0.0692], [\"242\", 0.0692], [\"245\", 0.0692], [\"249\", 0.0692], [\"252\", 0.0692], [\"255\", 0.1384], [\"258\", 0.0692], [\"262\", 0.0692]]}",
      "memory": 38868000,
      "memoryDisplay": "38.9 MB",
      "memoryPercentile": 38.82410000000003,
      "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"34209\", 1.3148], [\"34628\", 1.2456], [\"35046\", 1.5224], [\"35465\", 7.681699999999999], [\"35884\", 14.463700000000001], [\"36303\", 2.9758], [\"36721\", 2.1452], [\"37140\", 3.8062], [\"37559\", 1.3840000000000001], [\"37978\", 0.7612], [\"38396\", 20.4151], [\"38815\", 6.436], [\"39234\", 0.6228], [\"39653\", 1.1764000000000001], [\"40071\", 10.311399999999999], [\"40490\", 2.4221], [\"40909\", 0.41519999999999996], [\"41328\", 0.0692], [\"41746\", 0.2768], [\"42165\", 0.2076], [\"42584\", 0.1384], [\"43003\", 0.2076], [\"43421\", 0.2076], [\"43840\", 0.1384], [\"44259\", 0.2768], [\"44678\", 0.0692], [\"45096\", 0.8996], [\"45515\", 0.41519999999999996], [\"45934\", 0.2076], [\"46353\", 0.2076], [\"46771\", 0.0692], [\"47190\", 0.2076], [\"47609\", 0.0692], [\"48028\", 0.2076], [\"48446\", 0.8997], [\"48865\", 1.1073], [\"49284\", 0.8997], [\"49703\", 1.1072], [\"50121\", 0.1384], [\"50540\", 0.1384], [\"50959\", 0.2768], [\"51378\", 0.1384], [\"51796\", 0.0692], [\"52215\", 0.0692], [\"52634\", 0.0692], [\"53053\", 0.0692], [\"53471\", 0.0692], [\"53890\", 0.0692], [\"54309\", 0.0692], [\"54728\", 0.0692], [\"55146\", 0.0692], [\"55565\", 0.0692], [\"55984\", 0.1384], [\"56403\", 0.0692], [\"56821\", 0.1384], [\"57240\", 0.0692], [\"57659\", 0.0692], [\"58078\", 0.346], [\"58496\", 1.1765], [\"58915\", 1.3149], [\"59334\", 0.6228], [\"59753\", 0.7612000000000001], [\"60171\", 0.2076], [\"60590\", 0.0692], [\"61009\", 0.0692], [\"61428\", 0.1384], [\"61846\", 0.4152], [\"62265\", 0.2768], [\"62684\", 0.0692], [\"63103\", 0.2076], [\"63521\", 0.2076], [\"63940\", 0.0692], [\"64359\", 0.0692], [\"64778\", 0.0692]]}",
      "code": "#include <stdlib.h>\n#include <stdio.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int *)a - *(int *)b);\n}\n\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    // Sort the array first\n    qsort(nums, numsSize, sizeof(int), compare);\n    \n    int maxTriplets = numsSize * numsSize; // Sufficiently large initial allocation\n    int** result = (int**)malloc(maxTriplets * sizeof(int*));\n    *returnColumnSizes = (int*)malloc(maxTriplets * sizeof(int));\n    *returnSize = 0;\n    \n    for (int i = 0; i < numsSize - 2; i++) {\n        // Skip duplicate elements for i\n        if (i > 0 && nums[i] == nums[i - 1]) {\n            continue;\n        }\n        \n        int left = i + 1;\n        int right = numsSize - 1;\n        int target = -nums[i];\n        \n        while (left < right) {\n            int sum = nums[left] + nums[right];\n            if (sum < target) {\n                left++;\n            } else if (sum > target) {\n                right--;\n            } else {\n                // Found a triplet\n                result[*returnSize] = (int*)malloc(3 * sizeof(int));\n                result[*returnSize][0] = nums[i];\n                result[*returnSize][1] = nums[left];\n                result[*returnSize][2] = nums[right];\n                (*returnColumnSizes)[*returnSize] = 3;\n                (*returnSize)++;\n                \n                // Skip duplicate elements for left and right\n                while (left < right && nums[left] == nums[left + 1]) left++;\n                while (left < right && nums[right] == nums[right - 1]) right--;\n                left++;\n                right--;\n            }\n        }\n    }\n    \n    return result;\n}",
      "timestamp": 1749336025,
      "statusCode": 10,
      "user": {
        "username": "yosQbj5lkC",
        "profile": {
          "realName": "Henrique Freitas",
          "userAvatar": "https://assets.leetcode.com/users/yosQbj5lkC/avatar_1748722942.png"
        }
      },
      "lang": {
        "name": "c",
        "verboseName": "C"
      },
      "question": {
        "questionId": "15",
        "titleSlug": "3sum",
        "hasFrontendPreview": false
      },
      "notes": "",
      "flagType": "WHITE",
      "topicTags": [],
      "runtimeError": null,
      "compileError": null,
      "lastTestcase": "",
      "codeOutput": "",
      "expectedOutput": "",
      "totalCorrect": 314,
      "totalTestcases": 314,
      "fullCodeOutput": null,
      "testDescriptions": null,
      "testBodies": null,
      "testInfo": null,
      "stdOutput": ""
    }
  }
}
