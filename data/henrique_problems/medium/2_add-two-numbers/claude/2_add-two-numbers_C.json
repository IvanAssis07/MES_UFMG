{
    "data": {
        "submissionDetails": {
            "runtime": 3,
            "runtimeDisplay": "3 ms",
            "runtimePercentile": 35.579299999999996,
            "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"0\", 50.6927], [\"1\", 7.8401], [\"2\", 5.8879], [\"3\", 13.5548], [\"4\", 10.1385], [\"5\", 2.1568], [\"6\", 1.4641]]}",
            "memory": 12760000,
            "memoryDisplay": "12.8 MB",
            "memoryPercentile": 34.76069999999999,
            "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"11900\", 0.0315], [\"12000\", 1.039], [\"12100\", 2.0781], [\"12200\", 0.9603], [\"12300\", 0.5668], [\"12400\", 0.2676], [\"12500\", 3.2116], [\"12600\", 23.1423], [\"12700\", 33.9421], [\"12800\", 16.5145], [\"12900\", 9.7922]]}",
            "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\n    // Create dummy head to simplify list construction\n    struct ListNode* dummy = (struct ListNode*)malloc(sizeof(struct ListNode));\n    dummy->val = 0;\n    dummy->next = NULL;\n    \n    struct ListNode* current = dummy;\n    int carry = 0;\n    \n    // Process both lists while at least one has nodes or there's a carry\n    while (l1 != NULL || l2 != NULL || carry != 0) {\n        int sum = carry;\n        \n        // Add value from l1 if available\n        if (l1 != NULL) {\n            sum += l1->val;\n            l1 = l1->next;\n        }\n        \n        // Add value from l2 if available\n        if (l2 != NULL) {\n            sum += l2->val;\n            l2 = l2->next;\n        }\n        \n        // Calculate new carry and digit\n        carry = sum / 10;\n        int digit = sum % 10;\n        \n        // Create new node for the result\n        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));\n        newNode->val = digit;\n        newNode->next = NULL;\n        \n        // Link to result list\n        current->next = newNode;\n        current = newNode;\n    }\n    \n    // Save the actual head (skip dummy)\n    struct ListNode* result = dummy->next;\n    free(dummy);\n    \n    return result;\n}\n\n// Helper function to create a linked list from array (for testing)\nstruct ListNode* createList(int* arr, int size) {\n    if (size == 0) return NULL;\n    \n    struct ListNode* head = (struct ListNode*)malloc(sizeof(struct ListNode));\n    head->val = arr[0];\n    head->next = NULL;\n    \n    struct ListNode* current = head;\n    for (int i = 1; i < size; i++) {\n        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));\n        newNode->val = arr[i];\n        newNode->next = NULL;\n        current->next = newNode;\n        current = newNode;\n    }\n    \n    return head;\n}\n\n// Helper function to free linked list\nvoid freeList(struct ListNode* head) {\n    while (head != NULL) {\n        struct ListNode* temp = head;\n        head = head->next;\n        free(temp);\n    }\n}\n\n",
            "timestamp": 1749257790,
            "statusCode": 10,
            "user": {
                "username": "yosQbj5lkC",
                "profile": {
                    "realName": "Henrique Freitas",
                    "userAvatar": "https://assets.leetcode.com/users/yosQbj5lkC/avatar_1748722942.png"
                }
            },
            "lang": {
                "name": "c",
                "verboseName": "C"
            },
            "question": {
                "questionId": "2",
                "titleSlug": "add-two-numbers",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 1569,
            "totalTestcases": 1569,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}