{
    "data": {
        "submissionDetails": {
            "runtime": 141,
            "runtimeDisplay": "141 ms",
            "runtimePercentile": 42.81849999999992,
            "runtimeDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"2\", 0.1482], [\"6\", 0.0785], [\"11\", 0.0698], [\"15\", 1.1772], [\"20\", 0.6978], [\"24\", 0.0523], [\"29\", 0.0174], [\"33\", 0.0174], [\"38\", 0.0959], [\"42\", 0.3488], [\"47\", 0.2354], [\"52\", 0.0523], [\"56\", 0.0087], [\"61\", 0.026099999999999998], [\"65\", 0.0436], [\"70\", 0.061], [\"74\", 0.0349], [\"79\", 0.18309999999999998], [\"83\", 0.253], [\"88\", 1.5609], [\"92\", 2.0406], [\"97\", 2.0232], [\"101\", 1.5175], [\"106\", 0.9156], [\"110\", 0.968], [\"115\", 0.7674000000000001], [\"119\", 1.8576], [\"124\", 3.5058000000000002], [\"128\", 10.4736], [\"133\", 15.4095], [\"138\", 14.179900000000002], [\"142\", 6.4882], [\"147\", 4.1248000000000005], [\"151\", 2.2761], [\"156\", 2.1627], [\"160\", 1.2993999999999999], [\"165\", 1.6133000000000002], [\"169\", 1.3168000000000002], [\"174\", 1.3256000000000001], [\"178\", 0.9767], [\"183\", 0.8460000000000001], [\"187\", 0.9766999999999999], [\"192\", 0.6890000000000001], [\"196\", 0.6976], [\"201\", 0.436], [\"205\", 0.471], [\"210\", 0.5581], [\"214\", 0.872], [\"219\", 1.0814], [\"223\", 1.6134], [\"228\", 0.7238], [\"233\", 0.5494], [\"237\", 0.2703], [\"242\", 0.28779999999999994], [\"246\", 0.16570000000000001], [\"251\", 0.3663], [\"255\", 0.2965], [\"260\", 0.28759999999999997], [\"264\", 0.33999999999999997], [\"269\", 0.2964], [\"273\", 0.1395], [\"278\", 0.1745], [\"282\", 0.19189999999999996], [\"287\", 0.2005], [\"291\", 0.2092], [\"296\", 0.1395], [\"300\", 0.096], [\"305\", 0.1919], [\"309\", 0.1133], [\"314\", 0.096], [\"319\", 0.1308], [\"323\", 0.1308], [\"328\", 0.1394], [\"332\", 0.1482], [\"337\", 0.1134], [\"341\", 0.1133], [\"346\", 0.122], [\"350\", 0.0871], [\"355\", 0.0697], [\"359\", 0.1482]]}",
            "memory": 59696000,
            "memoryDisplay": "59.7 MB",
            "memoryPercentile": 57.1207,
            "memoryDistribution": "{\"lang\": \"python3\", \"distribution\": [[\"56675\", 0.5058], [\"56826\", 1.6743999999999999], [\"56978\", 0.1831], [\"57129\", 0.0349], [\"57280\", 0.0087], [\"57431\", 0.0174], [\"57583\", 0.0087], [\"57734\", 0.0174], [\"57885\", 0.0174], [\"58036\", 0.0087], [\"58188\", 0.061], [\"58339\", 0.0436], [\"58490\", 0.1221], [\"58641\", 0.1744], [\"58793\", 1.2296], [\"58944\", 8.1451], [\"59095\", 30.627], [\"59246\", 28.2201], [\"59398\", 12.5142], [\"59549\", 3.6278], [\"59700\", 2.1714], [\"59851\", 0.5145], [\"60003\", 0.1831], [\"60154\", 0.0262], [\"60305\", 0.0087], [\"60456\", 0.0348], [\"60608\", 0.0262], [\"60759\", 0.026099999999999998], [\"60910\", 0.0785], [\"61061\", 0.33140000000000003], [\"61213\", 0.1919], [\"61364\", 0.1308], [\"61515\", 0.0698], [\"61666\", 0.061], [\"61818\", 0.0087], [\"61969\", 0.0348], [\"62120\", 0.0349], [\"62271\", 0.157], [\"62423\", 0.1221], [\"62574\", 0.2791], [\"62725\", 0.0784], [\"62876\", 0.0087], [\"63028\", 0.0087], [\"63179\", 0.0262], [\"63330\", 0.0349], [\"63481\", 0.0174], [\"63633\", 0.0087], [\"63784\", 0.0087], [\"63935\", 0.0262], [\"64086\", 0.0349], [\"64238\", 0.0174], [\"64389\", 0.0174], [\"64540\", 0.0872], [\"64691\", 0.0436], [\"64843\", 0.0087], [\"64994\", 0.0087], [\"65145\", 0.0262], [\"65296\", 0.0174], [\"65448\", 0.0087], [\"65599\", 0.0174], [\"65750\", 0.0174], [\"65901\", 0.0523], [\"66053\", 0.0262], [\"66204\", 0.0087], [\"66355\", 0.0174], [\"66506\", 0.0262], [\"66658\", 0.0174], [\"66809\", 0.0087], [\"66960\", 0.0698], [\"67111\", 0.375], [\"67263\", 0.811], [\"67414\", 0.7413], [\"67565\", 0.3052], [\"67716\", 0.1919]]}",
            "code": "from typing import List\n\nclass Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        result = []\n        \n        def backtrack(start, path):\n            # Base case: if we have k numbers in our combination\n            if len(path) == k:\n                result.append(path[:])  # Add a copy of the current path\n                return\n            \n            # Try all numbers from start to n\n            for i in range(start, n + 1):\n                # Choose: add current number to path\n                path.append(i)\n                # Explore: recursively build combinations starting from i+1\n                backtrack(i + 1, path)\n                # Unchoose: remove current number (backtrack)\n                path.pop()\n        \n        backtrack(1, [])\n        return result",
            "timestamp": 1749413159,
            "statusCode": 10,
            "user": {
                "username": "ZRlvkAicEr",
                "profile": {
                    "realName": "ZRlvkAicEr",
                    "userAvatar": "https://assets.leetcode.com/users/ZRlvkAicEr/avatar_1749245074.png"
                }
            },
            "lang": {
                "name": "python3",
                "verboseName": "Python3"
            },
            "question": {
                "questionId": "77",
                "titleSlug": "combinations",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 27,
            "totalTestcases": 27,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}