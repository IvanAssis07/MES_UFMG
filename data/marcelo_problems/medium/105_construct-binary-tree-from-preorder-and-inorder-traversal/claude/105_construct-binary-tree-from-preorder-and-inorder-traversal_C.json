{
    "data": {
        "submissionDetails": {
            "runtime": 7,
            "runtimeDisplay": "7 ms",
            "runtimePercentile": 70.7183,
            "runtimeDistribution": "{\"lang\": \"c\", \"distribution\": [[\"0\", 2.2099], [\"1\", 0.5525], [\"2\", 1.105], [\"3\", 9.3923], [\"4\", 6.0773], [\"5\", 5.2486], [\"6\", 4.6961], [\"7\", 23.7569], [\"8\", 14.6409], [\"9\", 4.6961], [\"10\", 5.2486], [\"11\", 13.8122]]}",
            "memory": 14232000,
            "memoryDisplay": "14.2 MB",
            "memoryPercentile": 79.5582,
            "memoryDistribution": "{\"lang\": \"c\", \"distribution\": [[\"11000\", 0.8287], [\"11300\", 0.2762], [\"11900\", 0.2762], [\"14100\", 2.7624], [\"14200\", 16.2983], [\"14300\", 30.9392], [\"14400\", 21.8232], [\"14500\", 11.326], [\"14600\", 4.9724], [\"14700\", 1.9337], [\"14800\", 0.2762], [\"14900\", 0.2762], [\"15000\", 0.5525], [\"15300\", 0.5525], [\"15400\", 1.105], [\"15500\", 0.2762]]}",
            "code": "#include <stdlib.h>\n\n// Helper function to find index of value in inorder array\nint findIndex(int* inorder, int start, int end, int val) {\n    for (int i = start; i <= end; i++) {\n        if (inorder[i] == val) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n// Helper function to build tree recursively\nstruct TreeNode* buildTreeHelper(int* preorder, int* preStart, int* inorder, \n                                int inStart, int inEnd) {\n    // Base case: no elements to process\n    if (inStart > inEnd) {\n        return NULL;\n    }\n    \n    // Create new node with current preorder element\n    struct TreeNode* root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n    root->val = preorder[*preStart];\n    root->left = NULL;\n    root->right = NULL;\n    \n    // Move to next element in preorder\n    (*preStart)++;\n    \n    // If this is the only element, return it\n    if (inStart == inEnd) {\n        return root;\n    }\n    \n    // Find root's position in inorder array\n    int rootIndex = findIndex(inorder, inStart, inEnd, root->val);\n    \n    // Recursively build left subtree (elements before root in inorder)\n    root->left = buildTreeHelper(preorder, preStart, inorder, inStart, rootIndex - 1);\n    \n    // Recursively build right subtree (elements after root in inorder)\n    root->right = buildTreeHelper(preorder, preStart, inorder, rootIndex + 1, inEnd);\n    \n    return root;\n}\n\nstruct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize) {\n    if (preorderSize == 0 || inorderSize == 0) {\n        return NULL;\n    }\n    \n    int preStart = 0;\n    return buildTreeHelper(preorder, &preStart, inorder, 0, inorderSize - 1);\n}",
            "timestamp": 1749414033,
            "statusCode": 10,
            "user": {
                "username": "ZRlvkAicEr",
                "profile": {
                    "realName": "ZRlvkAicEr",
                    "userAvatar": "https://assets.leetcode.com/users/ZRlvkAicEr/avatar_1749245074.png"
                }
            },
            "lang": {
                "name": "c",
                "verboseName": "C"
            },
            "question": {
                "questionId": "105",
                "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
                "hasFrontendPreview": false
            },
            "notes": "",
            "flagType": "WHITE",
            "topicTags": [],
            "runtimeError": null,
            "compileError": null,
            "lastTestcase": "",
            "codeOutput": "",
            "expectedOutput": "",
            "totalCorrect": 203,
            "totalTestcases": 203,
            "fullCodeOutput": null,
            "testDescriptions": null,
            "testBodies": null,
            "testInfo": null,
            "stdOutput": ""
        }
    }
}